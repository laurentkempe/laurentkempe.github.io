<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Laurent Kempé</title>
  
  <subtitle>One of the Tech Head Brothers</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://laurentkempe.com/"/>
  <updated>2018-09-08T06:34:53.326Z</updated>
  <id>https://laurentkempe.com/</id>
  
  <author>
    <name>Laurent Kempé</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WPF with Application Insights</title>
    <link href="https://laurentkempe.com/2018/09/08/WPF-with-Application-Insights/"/>
    <id>https://laurentkempe.com/2018/09/08/WPF-with-Application-Insights/</id>
    <published>2018-09-08T06:34:53.000Z</published>
    <updated>2018-09-08T06:34:53.326Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Automating my development machine installation</title>
    <link href="https://laurentkempe.com/2018/06/01/Automating-development-machine-installation/"/>
    <id>https://laurentkempe.com/2018/06/01/Automating-development-machine-installation/</id>
    <published>2018-06-01T16:15:12.000Z</published>
    <updated>2018-06-02T05:27:51.859Z</updated>
    
    <content type="html"><![CDATA[<p>Since Microsoft went to <a href="https://docs.microsoft.com/en-us/windows/deployment/update/waas-quick-start" target="_blank" rel="noopener">Windows as a service</a>, so since Windows 10, I fully re-install my development machine, a Surface Book, with each main release of Windows.</p><p>As I hate to lose time, I searched a way to automate it, so that it is fast, repeatable and does the work, not me.<br><a id="more"></a></p><p><strong>TL; DR;</strong> (Spoiler) Install your development environment tools with one click on a hyperlink!</p><p>Since long, I am using <strong><a href="https://chocolatey.org/" target="_blank" rel="noopener">Chocolatey</a></strong>, <strong>the package manager for Windows</strong>, to install some of my tools. I even created an installation of <a href="https://marketplace.visualstudio.com/items?itemName=LaurentKempe.GitDiffMargin" target="_blank" rel="noopener">Git Diff Margin</a>, my Visual Studio extension displaying live changes of the currently edited file on Visual Studio 2012+ margin and scrollbar. Note to me, update the package to the latest version of Git Diff Margin.</p><p>That’s already a fantastic step forward, you type one command line like this</p><blockquote><p>choco install git -y</p></blockquote><p>and you get Git installed without doing anything, except typing the command! No need to search on which website you need to download the software, download it, maybe extract it to finally be able to run it and click next-next-next (eh Cédric). Just one command on the command line and you are done. Great, no?</p><p>But after re-installing my machine this way a first time and a second time I wanted more automation. So I decided to dig deeper in a tool I found also a long time ago but never took the time to use; <strong><a href="https://boxstarter.org/" target="_blank" rel="noopener">Boxstarter</a>: repeatable, reboot resilient Windows environment installations made easy using Chocolatey packages</strong>. Seems to exactly match what I wanted to achieve for the next level of automation.</p><p>So I searched some examples on Github and cooked my own script which I open sourced and called it <strong><a href="https://github.com/laurentkempe/Cacao/blob/master/PrepareMyCacao.ps1" target="_blank" rel="noopener">Cacao</a></strong>. A nice name, no :D?</p><div class="figure center" style="width:375;"><a class="fancybox" href="https://farm5.staticflickr.com/4616/40521281581_57a9b1d503_o.jpg" title="Cabosse de cacaoyer, Martinique" data-caption="Cabosse de cacaoyer, Martinique" data-fancybox="martinique" target="_blank" rel="noopener"><img class="fig-img" src="https://farm5.staticflickr.com/4616/40521281581_3d775063cc.jpg" style="width:375;height:500;" alt="Cabosse de cacaoyer, Martinique"></a><span class="caption">Cabosse de cacaoyer, Martinique</span></div><p>So now, when I have installed my Windows 10 machine from scratch I just need to install Boxstarter, download my script and launch it! A very nice step forward indeed.</p><p>Wait can’t we do better, there is still quite some things to do by hand, and you need to remember those things!<br>What do you think of being able to click on a hyperlink, click on OK then everything would be installed for you by little pixies while you do something else? That would be just fantastic. The best is that it is possible!</p><p>You can see such a link on <a href="https://github.com/laurentkempe/Cacao/blob/master/README.md" target="_blank" rel="noopener">Cacao README.md file</a> search for the text ‘Install my tools!’.</p><p>This link is built as following</p><figure class="highlight html"><figcaption><span>Cacao install hyperlink</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'http://boxstarter.org/package/nr/url?https://raw.githubusercontent.com/laurentkempe/Cacao/master/PrepareMyCacao.ps1'</span>&gt;</span></span><br><span class="line">  Install my tools!</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>So easy and so powerful. You append the hyperlink to the raw URL of your script to an URL which will install Boxstarter, and that does the trick!</p><p>So now we are ready to install development environment tools by one click on a hyperlink! What do you want more?</p><p>During the Build2018 Microsoft got interested in that topic, which is great, and you can read about it in their blog post “<a href="https://blogs.msdn.microsoft.com/commandline/2018/05/08/join-us-for-a-hot-cup-o-chocolatey/" target="_blank" rel="noopener">Join us for a hot cup o Chocolatey!</a>“ and on their Github repo <a href="https://github.com/Microsoft/windows-dev-box-setup-scripts" target="_blank" rel="noopener">windows-dev-box-setup-scripts</a>.</p><p>One fantastic side effect is that now I can also update all my tools by running one command</p><blockquote><p>choco upgrade all -y</p></blockquote><p>Like they say, there’s never been a better time to be a developer!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Since Microsoft went to &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/deployment/update/waas-quick-start&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Windows as a service&lt;/a&gt;, so since Windows 10, I fully re-install my development machine, a Surface Book, with each main release of Windows.&lt;/p&gt;
&lt;p&gt;As I hate to lose time, I searched a way to automate it, so that it is fast, repeatable and does the work, not me.&lt;br&gt;
    
    </summary>
    
    
      <category term="Windows" scheme="https://laurentkempe.com/tags/Windows/"/>
    
      <category term="PowerShell" scheme="https://laurentkempe.com/tags/PowerShell/"/>
    
  </entry>
  
  <entry>
    <title>Debugging into ASP.NET Core 2.0 source code</title>
    <link href="https://laurentkempe.com/2017/09/26/Debugging-into-ASP.NET-Core-2.0-source-code/"/>
    <id>https://laurentkempe.com/2017/09/26/Debugging-into-ASP.NET-Core-2.0-source-code/</id>
    <published>2017-09-26T18:44:11.000Z</published>
    <updated>2018-05-29T15:42:44.712Z</updated>
    
    <content type="html"><![CDATA[<p>I am just back from 2.5 months unpaid leave which I used to spend time with my family. So, I almost did not spend time with software development. One exception is that I wanted to be able to configure Visual Studio 2017 to be able to debug into ASP.NET Core 2.0 source code.<br><a id="more"></a><br>Something which should have been simple didn’t work for long because Microsoft wasn’t publishing the PDBs. There were other ways to achieve that goal but it was fairly complex, so I decided to wait. Now, this has changed with the release of ASP.NET Core 2.0.</p><p>But first, why would you want to step into the source code of ASP.NET Core 2.0?<br>In my case, I find it very helpful to understand how the framework is working. So it is a great way to learn the internals of the framework and I am most particularly interested about the compilation of Razor pages.</p><p>Finally, the team uploaded the PDBs of ASP.NET Core 2.0 on the Microsoft Symbol Servers. And it is coming with a bonus feature of Visual Studio 2017 15.3; Source Link Support for Windows PDB File Format, which makes everything easy again.</p><blockquote><p></p><p>Source Link is now supported for Windows PDB file format (in addition to Portable PDBs). Compilers that support it can put the necessary information in the Windows PDB file format and the debugger can retrieve source files based on that information.<br></p><footer><strong>Microsoft</strong><cite><a href="https://www.visualstudio.com/en-us/news/releasenotes/vs2017-relnotes#source-link-support-for-windows-pdb-file-format" target="_blank" rel="noopener">Visual Studio 2017 version 15.3 Release Notes</a></cite></footer></blockquote><p></p><p>In this post, I will show you the fastest way to setup Visual Studio 2017 15.3 so that you can debug into ASP.NET Core 2.0 source code!</p><p>To start you can either use your current application or create a new ASP.NET Core 2.0 Web application.<br>I have Visual Studio 2017.3 default collection settings set to Web Development.</p><p>Open you Startup class, and set a breakpoint on the ConfigureServices method, then if you start a debugging session with F5 you will end up in this situation</p><p><img src="https://farm5.staticflickr.com/4343/37372298705_65a2054a8d_c.jpg" alt=""></p><p>In the Call Stack window, we see only our code and [External Code]</p><p>Open Visual Studio options dialog, even without stopping your debugging session, using menu <strong>Tools / Options</strong> and choose <strong>Debugging</strong>, then untick <strong>Enable Just My Code</strong>. Click OK. Now the Call Stack Window show you much more like this</p><p><img src="https://farm5.staticflickr.com/4427/37372901855_bc43c1e579_c.jpg" alt=""></p><p>We see now, our code is called from <em>Microsoft.AspNetCore.Hosting.dll</em></p><p>Right click on Microsoft.AspNetCore.Hosting.dll and choose <strong>Load Symbols</strong></p><p><img src="https://farm5.staticflickr.com/4406/37287703876_296032f829_c.jpg" alt=""></p><p>Then the following dialog will be shown, give it some time to download the symbols from Microsoft Symbol Servers</p><p><img src="https://farm5.staticflickr.com/4417/23483587158_1b3d16d4fc_z.jpg" alt=""></p><p>Now you should see the <em>Microsoft.AspNetCore.Hosting.dll</em> in white in the Call Stack window and right-clicking it, you can now choose <strong>Go To Source Code</strong></p><p><img src="https://farm5.staticflickr.com/4478/36625825424_87d424b7ef_c.jpg" alt=""></p><p>Finally the new Source Link dialog popup and let you download the source automatically </p><p><img src="https://farm5.staticflickr.com/4470/23483589828_59452c0da4_z.jpg" alt=""></p><p>You finally end up in the ASP.NET Core 2 source code, can set breakpoints and inspect some of the variables!</p><p><img src="https://farm5.staticflickr.com/4502/23483591168_c99dd6953f_c.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I am just back from 2.5 months unpaid leave which I used to spend time with my family. So, I almost did not spend time with software development. One exception is that I wanted to be able to configure Visual Studio 2017 to be able to debug into ASP.NET Core 2.0 source code.&lt;br&gt;
    
    </summary>
    
    
      <category term="ASP.NET Core" scheme="https://laurentkempe.com/tags/ASP-NET-Core/"/>
    
      <category term="Visual Studio 2017" scheme="https://laurentkempe.com/tags/Visual-Studio-2017/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core MVC app running on Raspberry Pi</title>
    <link href="https://laurentkempe.com/2017/04/14/ASPNET-Core-MVC-app-running-on-raspberry-pi/"/>
    <id>https://laurentkempe.com/2017/04/14/ASPNET-Core-MVC-app-running-on-raspberry-pi/</id>
    <published>2017-04-14T15:26:06.000Z</published>
    <updated>2018-05-29T15:42:44.679Z</updated>
    
    <content type="html"><![CDATA[<p>After running a first console app on my Raspberry Pi 3, I had to try ASP.NET Core and API. Two weeks ago when I posted <a href="http://laurentkempe.com/2017/04/03/Dotnet-Core-app-running-on-raspberry-pi/">“.NET Core console app running on Raspberry Pi”</a>, I could make API working, but I had no chance with MVC. Today it worked!</p><a id="more"></a><p>This post will describe all steps I had to go through to have an ASP.NET Core MVC application running on my Raspberry Pi 3. I will not repeat the steps needed to install the Ubuntu MATE on the Pi, neither how to install the different tools, e.g., SSH Server, Putty, WinSCP… to have an efficient development environment, you can check the previous post for that.</p><p>Again you will need to install the .NET Core 2.0 SDK on your Windows machine. This time I used <a href="https://github.com/dotnet/cli/tree/master" target="_blank" rel="noopener">Windows x64 2.0.0-preview1-005791</a> which I downloaded as a zip. I unzipped it, and then I added it to the System Path.</p><p>So now when I run dotnet with the help flag, I see the following, and I am sure to run the correct version</p><p><div style="clear:both;"></div><script src="//gist.github.com/38e29bb3942d167a252d13e56d8a45a9.js?file=dotnetHelp"></script></p><p>Next, we will create the <a href="https://docs.microsoft.com/en-us/aspnet/core/" target="_blank" rel="noopener">ASP.NET Core MVC</a> project using the following</p><p><div style="clear:both;"></div><script src="//gist.github.com/38e29bb3942d167a252d13e56d8a45a9.js?file=createProject"></script></p><p>Now we have to adapt the <strong>mvc.csproj</strong> like this</p><p><div style="clear:both;"></div><script src="//gist.github.com/38e29bb3942d167a252d13e56d8a45a9.js?file=mvc.csproj"></script></p><p>We removed the <em>PackageTargetFallback</em> and added <em>RuntimeFrameworkVersion</em>, <em>RuntimeIdentifiers</em>.</p><p>To get access on the network to our ASP.NET Core MVC application we must first adapt the generated <strong>Program.cs</strong> file, to add the line <strong>.UseUrls(“http://*:8000”)</strong></p><p><div style="clear:both;"></div><script src="//gist.github.com/38e29bb3942d167a252d13e56d8a45a9.js?file=Program.cs"></script></p><p>This code change will instruct the framework to bind to all network cards available on the PI, and thus make the web application accessible from your network.</p><p>Then we need to run the restore command</p><p><div style="clear:both;"></div><script src="//gist.github.com/38e29bb3942d167a252d13e56d8a45a9.js?file=dotnetRestore"></script></p><p>Then we publish </p><p><div style="clear:both;"></div><script src="//gist.github.com/38e29bb3942d167a252d13e56d8a45a9.js?file=dotnetPublish"></script></p><p>We use WinSCP to copy all the files create in the folder <em>C:\@Projects\pi\mvc\bin\Debug\netcoreapp2.0\ubuntu.16.04-arm32\publish\</em> to the Raspberry Pi. Then we run the application from Putty</p><p><div style="clear:both;"></div><script src="//gist.github.com/38e29bb3942d167a252d13e56d8a45a9.js?file=dotnetMVC"></script></p><p>Now we are ready to display our first web page using ASP.NET Core MVC running on the Raspberry Pi 3. The first time your browse the site, it will be slow because the Raspberry Pi needs to compile the Razor Page, but you will finally end in front of</p><p><img src="https://c1.staticflickr.com/3/2818/33902220761_b539cfd3fa_o.png" alt="ASP.NET Core MVC on Raspberry PI"></p><p>Enjoy!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;After running a first console app on my Raspberry Pi 3, I had to try ASP.NET Core and API. Two weeks ago when I posted &lt;a href=&quot;http://laurentkempe.com/2017/04/03/Dotnet-Core-app-running-on-raspberry-pi/&quot;&gt;“.NET Core console app running on Raspberry Pi”&lt;/a&gt;, I could make API working, but I had no chance with MVC. Today it worked!&lt;/p&gt;
    
    </summary>
    
    
      <category term=".NET Core" scheme="https://laurentkempe.com/tags/NET-Core/"/>
    
      <category term="Raspberry Pi" scheme="https://laurentkempe.com/tags/Raspberry-Pi/"/>
    
      <category term="Linux" scheme="https://laurentkempe.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core console app running on Raspberry Pi</title>
    <link href="https://laurentkempe.com/2017/04/03/Dotnet-Core-app-running-on-raspberry-pi/"/>
    <id>https://laurentkempe.com/2017/04/03/Dotnet-Core-app-running-on-raspberry-pi/</id>
    <published>2017-04-03T19:40:07.000Z</published>
    <updated>2018-05-29T15:42:44.719Z</updated>
    
    <content type="html"><![CDATA[<p>Now that there is a distribution of .NET Core on a Linux distro running on my <a href="https://www.raspberrypi.org/products/raspberry-pi-3-model-b/" target="_blank" rel="noopener">Raspberry Pi 3</a>, I had to try it.</p><p>In this post, I will explain all the steps I had to execute to be able to run my first Hello World application.<br><a id="more"></a><br>First, you will need to install on your Pi the <a href="https://ubuntu-mate.org/raspberry-pi/" target="_blank" rel="noopener">Ubuntu MATE distribution</a>. Currently, the RASPBIAN distribution, which is the mostly used, is not supported but it seems that it will be soon the case according to this <a href="https://github.com/dotnet/core/issues/447" target="_blank" rel="noopener">Github issue on dotnet / core</a>.</p><p>Download <a href="https://ubuntu-mate.org/download/" target="_blank" rel="noopener">Ubuntu MATE 16.04.2 LTS for Raspberry Pi</a>, then extract the image out of the archive.</p><p>To install it on your microSDHC, the best is to use <a href="https://chocolatey.org/packages/win32diskimager" target="_blank" rel="noopener">Win32 Disk Imager</a> which you can install using Chocolatey with the command ‘<em>choco install win32diskimager</em>‘.</p><p>Then just write the image you extracted on your microSDHC using Win32 Disk Imager, like this:</p><p><img src="https://c1.staticflickr.com/3/2822/32957708953_4ff95b973b_o.png" alt=""></p><p>Wait a couple of minutes then plug the microSDHC in your Pi and boot it, then follow the installation instruction and create your user.</p><p>Currently, there is no .NET Core SDK running on ARM processor, the CPU architecture of the Pi. So you will have to write and compile your program from another machine, in my case I run on Windows.</p><p>Now to simplify all the operations I installed a SSH server on the Pi to make it easy to access it remotely and copy files from my Surface.</p><p>To install the SSH server, run a shell, and run the following commands</p><p><div style="clear:both;"></div><script src="//gist.github.com/75b6b70d1bcdc3b4caa030160dbcb018.js?file=installSSSHServer"></script></p><p>Then we will need to install some .NET Core native prerequisites for Ubuntu as explained on the <a href="https://github.com/dotnet/core/blob/master/Documentation/prereqs.md" target="_blank" rel="noopener">Github dotnet / core documentation</a>.</p><p><div style="clear:both;"></div><script src="//gist.github.com/cf534c59a094654491e28b0d1701738a.js?file=prerequisites"></script></p><p>You will need the IP of your Pi, so use the command ‘<em>ifconfig</em>‘ which will output something like that</p><p><img src="https://c2.staticflickr.com/4/3816/32957721773_5f33093414_o.png" alt=""></p><p>Then back to your PC, install <a href="https://chocolatey.org/packages/putty" target="_blank" rel="noopener">Putty</a> using ‘<em>choco install putty</em>‘ and <a href="https://chocolatey.org/packages/winscp" target="_blank" rel="noopener">WinSCP</a> using ‘<em>choco install winscp</em>‘.</p><p>Configure both Putty and WinSCP to connect to your Pi using the IP address you’ve got from the ifconfig command</p><p>Now that we have the Pi running the right Linux distribution on it and we can connect to it easily from our computer, it is time to create a first .NET Core project. For sure, we will start with the famous Hello World.</p><p><a href="https://github.com/dotnet/cli/tree/master" target="_blank" rel="noopener">Install .NET Core 2.0 SDK</a>, I used the Windows x64 version 2.0.0-preview1-005685 which I downloaded as a zip. Unpack it on your hard drive in a folder named dotnet, then create another folder at the same level called hello and create a new console application:</p><p><div style="clear:both;"></div><script src="//gist.github.com/0b60cae1c6c10ccab6ed3f167e766cb5.js?file=create_project"></script></p><p>Edit the file hello.csproj created in the folder. I use <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code</a> for that, which again can be installed using <a href="https://chocolatey.org/packages/VisualStudioCode" target="_blank" rel="noopener">Chocolatey</a> ‘<em>choco install visualstudiocode</em>‘. You will need to update the RuntimeFrameworkVersion with the version that you can find on the page .NET Core Runtime &amp; Host Setup Repo / <a href="https://github.com/dotnet/core-setup#daily-builds" target="_blank" rel="noopener">Daily Builds</a> then <strong>find Ubuntu 16.04 (arm32)</strong> and get the version, in my <strong>case 2.0.0-preview1-005685</strong>.</p><p><div style="clear:both;"></div><script src="//gist.github.com/809deab02a08a52ee17f3cb03a7b39c1.js?file=hello.csproj"></script></p><p>Then run, and publish</p><p><div style="clear:both;"></div><script src="//gist.github.com/98813ec107d827fd3ef3cb6178d36caf.js?file=run_publish"></script></p><p>Finally, you will get the publish results in the folder <strong>.\hello\bin\Debug\netcoreapp2.0\ubuntu.16.04-arm</strong> which you can easily upload to your Pi using WinSCP previously installed.</p><p>You need then to set the hello executable to have the execution rights on the Pi, which you can also do easily from WinSCP</p><p><img src="https://c1.staticflickr.com/3/2806/33821762845_f3033ff9db_o.png" alt=""></p><p>The final step is to run you hello executable on the Pi, which you can do using Putty over SSH then, or by having your Pi connected to a monitor, mouse, and keyboard!</p><p>Here is the result</p><p><img src="https://c2.staticflickr.com/4/3856/32957716323_e196bc13f0_o.png" alt="Result"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Now that there is a distribution of .NET Core on a Linux distro running on my &lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-3-model-b/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Raspberry Pi 3&lt;/a&gt;, I had to try it.&lt;/p&gt;
&lt;p&gt;In this post, I will explain all the steps I had to execute to be able to run my first Hello World application.&lt;br&gt;
    
    </summary>
    
    
      <category term=".NET Core" scheme="https://laurentkempe.com/tags/NET-Core/"/>
    
      <category term="Raspberry Pi" scheme="https://laurentkempe.com/tags/Raspberry-Pi/"/>
    
      <category term="Linux" scheme="https://laurentkempe.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Build, ship and run ASP.NET Core on Microsoft Azure using Docker Cloud</title>
    <link href="https://laurentkempe.com/2016/07/18/Build-ship-and-run-ASP-NET-Core-on-Microsoft-Azure-using-Docker-Cloud/"/>
    <id>https://laurentkempe.com/2016/07/18/Build-ship-and-run-ASP-NET-Core-on-Microsoft-Azure-using-Docker-Cloud/</id>
    <published>2016-07-18T17:04:21.000Z</published>
    <updated>2018-05-29T15:42:44.699Z</updated>
    
    <content type="html"><![CDATA[<p>In the last posts, we looked at the code to <a href="http://laurentkempe.com/2016/05/16/ASP-NET-Core-RC2-Docker-and-HipChat-Connect-add-on/">build a HipChat Connect add-on with ASP.NET Core</a>, <a href="http://laurentkempe.com/2016/06/08/Deploying-Docker-containers-running-ASPNET-Core-RC2-to-Microsoft-Azure-Cloud/">run the solution in a Docker container</a> and <a href="http://laurentkempe.com/2016/06/20/Free-HTTPS-certificates-for-Docker-containers-running-ASPNET-Core-RC2-on-Microsoft-Azure/">secure the access to the application with a valid HTTPS certificate that we got from Let’s Encrypt for free</a> and finally deploy all of this on Azure!<br><a id="more"></a></p><p>One of my priority while working on new projects is to put in place Continous Integration/Continuous Delivery so that developers can develop and integrate the result of their work in a fast, efficient and easy way.</p><p>We have now all the necessary components to create that Continuous Integration and Continuous Delivery pipeline!</p><p>The goal is to have something which operates like that</p><ol><li>A developer merges something on the master branch of our Github repository</li><li>It triggers a build of a Docker container image using the Dockerfile versioned in Github, which internally compile our new version of our ASP.NET Core web application</li><li>In case of a successful build, it pushes the new Docker container image to a Docker repository</li><li>Finally, the new Docker image is deployed as a Docker container on Azure</li></ol><p>To fulfill those requirements, we will use <a href="https://cloud.docker.com/" target="_blank" rel="noopener">Docker Cloud</a> which lets you</p><blockquote><p>Build, ship, and run - any app, anywhere</p></blockquote><p>Exactly what we need!</p><blockquote><p>Automate Pipelines - Set up a fully automated CI/CD workflow in minutes, from git push to production.</p></blockquote><p>And as we want to use Docker the next argument is also interesting</p><blockquote><p>A Single Docker Platform- Docker Cloud has everything you need to build, ship and run your Dockerized application.</p></blockquote><p>So if you haven’t any Docker account you will first need to create one to be able to log in Docker Cloud.</p><p>Then you will need to <strong>link Docker Cloud to your provider</strong>, <a href="https://docs.docker.com/docker-cloud/infrastructure/link-azure/" target="_blank" rel="noopener">in our case Microsoft Azure</a>.</p><p>Now that Docker Cloud can operate Microsoft Azure, the next step is to <strong>create a node</strong>. A node is a Linux host or virtual machine used to deploy and run containers. It is the equivalent of what we did with the docker-machine command line on the post “<a href="http://laurentkempe.com/2016/06/08/Deploying-Docker-containers-running-ASPNET-Core-RC2-to-Microsoft-Azure-Cloud/">Deploying Docker containers running ASP.NET Core RC2 to Microsoft Azure Cloud</a>“. You can get all the instruction on the page “<a href="https://docs.docker.com/docker-cloud/getting-started/your_first_node/" target="_blank" rel="noopener">Deploy Your First Node</a>“.</p><p>In our case we created the following node:</p><p><img src="https://c4.staticflickr.com/9/8141/27745012403_54637b1580_o.jpg" alt="Docker Cloud node"></p><p>Currently, we have a machine, a node in Docker Cloud wording, so we are ready to deploy our containers on that node. We could <strong>create a service</strong>, which is a container, or a group of containers from the same Docker repository. But we are more interested in <strong>creating a stack</strong>,  which specifies a group of services that make up an application, similar to Docker Compose. As we have seen in “<a href="http://laurentkempe.com/2016/06/20/Free-HTTPS-certificates-for-Docker-containers-running-ASPNET-Core-RC2-on-Microsoft-Azure/">Free HTTPS certificates for Docker containers running ASP.NET Core RC2 on Microsoft Azure</a>,” our application is currently made of two components served as two containers: </p><ol><li>NGINX, reverse proxy and setting up Let’s Encrypt certificates</li><li>Kestrel delivering our ASP.NET Core 1.0 hipchat connect web application</li></ol><p>To create our stack, we are re-using our docker-compose.yml file set up in the previous post</p><p><div style="clear:both;"></div><script src="//gist.github.com/d529fcdf54724a900533f26fa4a768c3.js?file=docker-compose.yml"></script></p><p>which we modify slightly to describe our stack</p><p><div style="clear:both;"></div><script src="//gist.github.com/29165d3e6874cf4cc27d83ead5b8bd28.js?file=stackfile.yml"></script></p><p>The only difference, except the reordering, is to instruct automatic redeployment of the hipchatconnect container when an update of its image occurs in Docker Cloud registry, with the following line</p><blockquote><p>autoredeploy: true</p></blockquote><p>After creating the stack file and hitting the deploy button, we see the result of our stack with its two containers running on our node on Microsoft Azure!</p><p><img src="https://c6.staticflickr.com/9/8737/27745039973_30f15757da_o.jpg" alt="Docker Cloud stack"></p><p>Let’s have a break a moment to see what we have achieved at the moment and what remains to accomplish our goal to have a proper CI/CD pipeline and be able to deploy to production from a simple commit/merge in source code repository.<br>We have at the moment all the infrastructure ready. We have a node which is a machine in Azure running our application which is composed of two Docker containers.<br>So the last point is to connect this infrastructure to our source code repository which is a git repository on Github.</p><p>To do that we will use the <em>Build</em> part offered by Docker Cloud and the repositories. A repository is a collection of tagged images. When you create a service, you choose an image to use to create containers. You can read more about it on the page “<a href="https://docs.docker.com/docker-cloud/builds/repos/" target="_blank" rel="noopener">Docker Cloud repositories</a>“<br>Then we will enable the <a href="https://docs.docker.com/docker-cloud/builds/automated-build/" target="_blank" rel="noopener">autobuild</a> by connecting it to our Github repository which will trigger a new build with every git push to our source code repository.</p><p><img src="https://c6.staticflickr.com/9/8782/28360642885_2f32f1a280_o.jpg" alt="Docker Cloud Github Repository Build"></p><p>Pretty impressive results in such a little effort and short time! I have built some CI/CD in the past, but it wasn’t that easy, we see clearly the potential of today’s tooling that gives us so much power as software engineers!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In the last posts, we looked at the code to &lt;a href=&quot;http://laurentkempe.com/2016/05/16/ASP-NET-Core-RC2-Docker-and-HipChat-Connect-add-on/&quot;&gt;build a HipChat Connect add-on with ASP.NET Core&lt;/a&gt;, &lt;a href=&quot;http://laurentkempe.com/2016/06/08/Deploying-Docker-containers-running-ASPNET-Core-RC2-to-Microsoft-Azure-Cloud/&quot;&gt;run the solution in a Docker container&lt;/a&gt; and &lt;a href=&quot;http://laurentkempe.com/2016/06/20/Free-HTTPS-certificates-for-Docker-containers-running-ASPNET-Core-RC2-on-Microsoft-Azure/&quot;&gt;secure the access to the application with a valid HTTPS certificate that we got from Let’s Encrypt for free&lt;/a&gt; and finally deploy all of this on Azure!&lt;br&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://laurentkempe.com/tags/Docker/"/>
    
      <category term="HipChat Connect" scheme="https://laurentkempe.com/tags/HipChat-Connect/"/>
    
      <category term="ASP.NET Core" scheme="https://laurentkempe.com/tags/ASP-NET-Core/"/>
    
      <category term="Microsoft Azure" scheme="https://laurentkempe.com/tags/Microsoft-Azure/"/>
    
  </entry>
  
  <entry>
    <title>Free HTTPS certificates for Docker containers running ASP.NET Core RC2 on Microsoft Azure</title>
    <link href="https://laurentkempe.com/2016/06/20/Free-HTTPS-certificates-for-Docker-containers-running-ASPNET-Core-RC2-on-Microsoft-Azure/"/>
    <id>https://laurentkempe.com/2016/06/20/Free-HTTPS-certificates-for-Docker-containers-running-ASPNET-Core-RC2-on-Microsoft-Azure/</id>
    <published>2016-06-20T17:51:30.000Z</published>
    <updated>2018-05-29T15:42:44.734Z</updated>
    
    <content type="html"><![CDATA[<p>Following my previous posts on <a href="">ASP.NET Core RC2, Docker and HipChat Connect add-on</a> and <a href="">Deploying Docker containers running ASP.NET Core RC2 to Microsoft Azure Cloud</a> I needed, as promised in the last post, to come with a solution to secure the whole with an HTTPS certificate!<br><a id="more"></a></p><p>So the overall goal is to have my Hipchat Connect add-on written in C# and ASP.NET Core RC2 hosted in a Linux Docker container running in Microsoft Azure and secured by an HTTPS certificate.</p><p>I am following for quite some time the <a href="https://letsencrypt.org/" target="_blank" rel="noopener">Let’s Encrypt</a> project which is just perfect for what I want to do!</p><blockquote><p>Let’s Encrypt is a new Certificate Authority: It’s free, automated, and open.</p></blockquote><p>Now that I know that I can get in an automated way and for free an HTTPS certificate, the question is how should I architecture the solution? The answer is quite simple. As I use Docker, I can plug another Docker container with a reverse proxy in front of my current container which runs the <a href="https://github.com/aspnet/KestrelHttpServer" target="_blank" rel="noopener">Kestrel</a> web server hosting our C# and ASP.NET Core RC2 code.</p><div class="figure center" style="width:;"><img class="fig-img" src="https://c6.staticflickr.com/8/7494/27687906621_782bf08e81_o.jpg" alt="Reverse proxy & Kestrel containers architecture"><span class="caption">Reverse proxy & Kestrel containers architecture</span></div><div style="clear:both;"></div><p>Ok which reverse proxy then? First, I had a look to <a href="https://www.nginx.com/resources/wiki/#" target="_blank" rel="noopener">NGINX</a> which I knew then found <a href="https://traefik.io/" target="_blank" rel="noopener">Traefik</a>. I liked very much the <a href="https://www.youtube.com/watch?v=QvAz9mVx5TI" target="_blank" rel="noopener">DEVOXX presentation, in French</a>, from its author <a href="https://twitter.com/emilevauge" target="_blank" rel="noopener">Emile Vauge</a> and it, supports Let’s Encrypt out of the box.</p><p><div style="clear:both;"></div><div class="video-container"><iframe src="//www.youtube.com/embed/QvAz9mVx5TI" frameborder="0" allowfullscreen></iframe></div></p><p>I tried Traefik but till now could not make it work the way I wanted, so back to NGINX. But I do not give up.</p><p>I searched for a Docker image which runs NGINX and can be configured to get automatically and renew Let’s Encrypt certificates! I finally found <a href="https://github.com/SteveLTN/https-portal" target="_blank" rel="noopener">HTTPS-PORTAL</a> which was looking very promising.</p><blockquote><p>A fully automated HTTPS server powered by Nginx, Let’s Encrypt and Docker.</p></blockquote><p>To achieve the architecture I described before I started to use <a href="https://docs.docker.com/compose/" target="_blank" rel="noopener">Docker compose</a> so that with one command I can start/stop both containers either locally or on Microsoft Azure!</p><p>Following the <a href="https://github.com/SteveLTN/https-portal#quick-start" target="_blank" rel="noopener">documentation of HTTPS-PORTAL</a> I finally got the whole working with the following docker-compose.yml file</p><p><div style="clear:both;"></div><script src="//gist.github.com/d529fcdf54724a900533f26fa4a768c3.js?file=docker-compose.yml"></script></p><p>I fell into a trap, so be aware of it! I got first NGINX 502 Bad gateway error. I thought that the docker-compose.yml part for hipchat had to declare an exposed port. In fact, it doesn’t work like that. We are using links so that both containers are on the same internal network and that they can communicate. But that happens on their internal ports, so in our case for Kestrel and our Docker image, it is the port 5000. To realize that I had to connect to the container using</p><div class="alert info"><p>> docker exec -i -t CONTAINER /bin/bash</p></div><p>I installed wget, got the IP of the Kestrel container and tried to connect to it using wget also to get an error. That’s the moment I realized about the port!</p><p>To have <a href="https://letsencrypt.org/how-it-works/" target="_blank" rel="noopener">Let’s Encrypt set up our HTTPS server</a> and have it automatically obtain a browser-trusted certificate, without any human intervention, we need first to own a domain and to configure the DNS so that it resolves to the public IP of our virtual machine.</p><p>But first of all we need to configure our Azure IP address to be static</p><p><img src="https://c2.staticflickr.com/8/7340/27762904595_2258b2973e_o.png" alt="Microsoft Azure static IP"></p><p>And don’t forget to open the 443 HTTPS port on the Microsoft Azure firewall.</p><p>Now we are ready to start both containers using Docker compose</p><p><div style="clear:both;"></div><script src="//gist.github.com/d529fcdf54724a900533f26fa4a768c3.js?file=docker-compose.exe"></script></p><p>To be able to see what’s going on in the container we can use <em>docker ps</em> then <em>docker logs</em></p><p><div style="clear:both;"></div><script src="//gist.github.com/d529fcdf54724a900533f26fa4a768c3.js?file=docker-ps"></script></p><p><div style="clear:both;"></div><script src="//gist.github.com/d529fcdf54724a900533f26fa4a768c3.js?file=docker-logs"></script></p><p>Finally, we can use a web browser to access our public API now through HTTPS. And we can add the HipChat Connect add-on to one of our room.</p><p><img src="https://c2.staticflickr.com/8/7640/27764957416_3d36d8123c_o.gif" alt="HipChat Connect add-on"></p><p>The next step will be to automate all of this process so that we can develop, build and deploy all of this quickly and automatically!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Following my previous posts on &lt;a href=&quot;&quot;&gt;ASP.NET Core RC2, Docker and HipChat Connect add-on&lt;/a&gt; and &lt;a href=&quot;&quot;&gt;Deploying Docker containers running ASP.NET Core RC2 to Microsoft Azure Cloud&lt;/a&gt; I needed, as promised in the last post, to come with a solution to secure the whole with an HTTPS certificate!&lt;br&gt;
    
    </summary>
    
    
      <category term="ASP.NET Core RC2" scheme="https://laurentkempe.com/tags/ASP-NET-Core-RC2/"/>
    
      <category term="Docker" scheme="https://laurentkempe.com/tags/Docker/"/>
    
      <category term="HipChat Connect" scheme="https://laurentkempe.com/tags/HipChat-Connect/"/>
    
      <category term="Microsoft Azure" scheme="https://laurentkempe.com/tags/Microsoft-Azure/"/>
    
  </entry>
  
  <entry>
    <title>Deploying Docker containers running ASP.NET Core RC2 to Microsoft Azure Cloud</title>
    <link href="https://laurentkempe.com/2016/06/08/Deploying-Docker-containers-running-ASPNET-Core-RC2-to-Microsoft-Azure-Cloud/"/>
    <id>https://laurentkempe.com/2016/06/08/Deploying-Docker-containers-running-ASPNET-Core-RC2-to-Microsoft-Azure-Cloud/</id>
    <published>2016-06-08T11:45:01.000Z</published>
    <updated>2018-05-29T15:42:44.713Z</updated>
    
    <content type="html"><![CDATA[<p>Following my previous post on <a href="https://laurentkempe.com/2016/05/16/ASP-NET-Core-RC2-Docker-and-HipChat-Connect-add-on/">ASP.NET Core RC2, Docker and HipChat Connect add-on</a> I wanted to learn the next step which is to deploy my Docker container on the Microsoft Azure Cloud!<br><a id="more"></a></p><p>Due to a <a href="https://docs.docker.com/machine/drivers/azure/" target="_blank" rel="noopener">known issue</a> and to avoid to have issues with credentials you need to follow the instructions on the following page “<a href="https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-windows-create-aad-work-id/" target="_blank" rel="noopener">Creating a Work or School identity in Azure Active Directory to use with Windows VMs</a>“</p><blockquote><p>KNOWN ISSUE: There is a known issue with Azure Active Directory causing stored credentials to expire within hours rather than 14 days when the user logs in with personal Microsoft Account (formerly Live ID) instead of an Active Directory account. Currently, there is no ETA for resolution, however in the meanwhile, you can <a href="https://azure.microsoft.com/documentation/articles/virtual-machines-windows-create-aad-work-id/" target="_blank" rel="noopener">create an AAD account</a> and login with that as a workaround.</p></blockquote><p>Now to get ready to deploy we need first the following:</p><ol><li>Get an Azure account on <a href="https://azure.microsoft.com" target="_blank" rel="noopener">Azure</a></li><li>Get Azure subscription id from Subscriptions link</li></ol><p><img src="https://c5.staticflickr.com/8/7435/27355205412_b5b2f751fa_o.jpg" alt="Azure subscription id screenshot"></p><p>Then we need to create a machine on the Azure cloud which will host our Docker containers. For that we will use Docker Machine, you can read more about it on this web page “<a href="https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-linux-docker-machine/" target="_blank" rel="noopener">Use Docker Machine with the Azure driver</a>“. </p><p>Using Docker for Windows, I execute the following docker-machine command to create the machine</p><script src="//gist.github.com/b46c5bfa339e1fd42b35d87191432c41.js?file=docker-machine_create.log"></script><p>After a couple of minutes, we can check on the Azure cloud portal, All resources menu, that Azure created everything for us</p><p><img src="https://c1.staticflickr.com/8/7006/27177992480_1b3056ce8f_o.jpg" alt="Azure ressources screenshot"></p><p>Finally, we need to get the configuration to talk to that machine, and it’s Docker daemon</p><script src="//gist.github.com/b46c5bfa339e1fd42b35d87191432c41.js?file=docker-machine_env.log"></script><p>Then execute the last line which will configure our local environment  </p><blockquote><p>&amp; “C:\Program Files\Docker\Docker\Resources\bin\docker-machine.exe” env hipchatconnect | Invoke-Expression</p></blockquote><p>Now each docker commands will be executed by the machine hosted on Azure cloud.<br>Easy and awesome!</p><p>Next step is to have a Docker container to deploy! We will use the container from my previous post “<a href="http://laurentkempe.com/2016/05/16/ASP-NET-Core-RC2-Docker-and-HipChat-Connect-add-on/">ASP.NET Core RC2, Docker and HipChat Connect add-on</a>“.</p><p>First, we need to build an image using the following command</p><script src="//gist.github.com/b46c5bfa339e1fd42b35d87191432c41.js?file=docker_build.log"></script><p>Then we need to get the public IP of our machine on the Azure portal </p><p><img src="https://c6.staticflickr.com/8/7370/26847519653_66bc0cc208_o.jpg" alt="Azure public ip"></p><p>We can run the container on Azure cloud with</p><blockquote><p>docker run -d -p 80:5000 -e NGROK_URL=’<a href="http://40.68.122.128&#39;" target="_blank" rel="noopener">http://40.68.122.128&#39;</a> hipchatconnect</p></blockquote><p>To be able to connect to our connector on the HTTP port 80, we will need to configure the firewall</p><p><img src="https://c3.staticflickr.com/8/7375/27420164226_eaa9aa3d94_o.jpg" alt="Azure firewall configuration"></p><p>and finally, connect to it!</p><p><img src="https://c6.staticflickr.com/8/7515/27383357301_ef760d740b_o.jpg" alt="Docker container running in Azure Cloud result"></p><p>What a great experience to be able to create a machine in the Azure Cloud from the command line and deploy our software so quickly!</p><p>Now that it works we will need to tackle the next issue, which is to expose the container through https because <a href="https://developer.atlassian.com/hipchat/about-hipchat-connect" target="_blank" rel="noopener">HipChat Connect</a> needs it so that the add-on can be installed in <a href="https://www.hipchat.com/" target="_blank" rel="noopener">HipChat</a>. But that’s for another post.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Following my previous post on &lt;a href=&quot;https://laurentkempe.com/2016/05/16/ASP-NET-Core-RC2-Docker-and-HipChat-Connect-add-on/&quot;&gt;ASP.NET Core RC2, Docker and HipChat Connect add-on&lt;/a&gt; I wanted to learn the next step which is to deploy my Docker container on the Microsoft Azure Cloud!&lt;br&gt;
    
    </summary>
    
    
      <category term="ASP.NET Core RC2" scheme="https://laurentkempe.com/tags/ASP-NET-Core-RC2/"/>
    
      <category term="Docker" scheme="https://laurentkempe.com/tags/Docker/"/>
    
      <category term="HipChat Connect" scheme="https://laurentkempe.com/tags/HipChat-Connect/"/>
    
      <category term="Microsoft Azure" scheme="https://laurentkempe.com/tags/Microsoft-Azure/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core RC2, Docker and HipChat Connect add-on</title>
    <link href="https://laurentkempe.com/2016/05/16/ASP-NET-Core-RC2-Docker-and-HipChat-Connect-add-on/"/>
    <id>https://laurentkempe.com/2016/05/16/ASP-NET-Core-RC2-Docker-and-HipChat-Connect-add-on/</id>
    <published>2016-05-16T18:37:03.000Z</published>
    <updated>2018-05-29T15:42:44.680Z</updated>
    
    <content type="html"><![CDATA[<p>This weekend ASP.NET Core RC2 was starting to show up! And it finally was <a href="https://blogs.msdn.microsoft.com/webdev/2016/05/16/announcing-asp-net-core-rc2/" target="_blank" rel="noopener">released today</a>. Get it fresh from <a href="https://www.microsoft.com/net/core" target="_blank" rel="noopener">here</a>. We had here a long three days weekend with quite awful gray clouds and cold weather for the season, so a perfect excuse to get started!<br><a id="more"></a><br>The first project I wanted to port to ASP.NET Core RC2 is something I began to work on some time ago when <a href="https://www.hipchat.com/" target="_blank" rel="noopener">Atlassian HipChat</a> announced their new <a href="https://developer.atlassian.com/hipchat/about-hipchat-connect" target="_blank" rel="noopener">Connect</a> framework!</p><p>I had it working with <a href="https://github.com/NancyFx/Nancy" target="_blank" rel="noopener">NancyFx</a>; it is quite small and hacky at the moment, but at least an interesting little project to port on a weekend. The second part I wanted to have is to be able to make it run in a <a href="https://www.docker.com/" target="_blank" rel="noopener">Docker</a> container so that I will be able to deploy it on our Linux server at work.</p><p>So I installed the <a href="https://blogs.msdn.microsoft.com/visualstudio/2016/05/16/announcing-updated-web-development-tools-for-asp-net-core-rc2/" target="_blank" rel="noopener">ASP.NET Core Tooling Preview</a> for Visual Studio 2015 and created a new ASP.NET Core Web Application (.NET Core) in C#, for sure!</p><p><img src="https://farm8.staticflickr.com/7477/26962278712_2de5a67090_o.png" alt="New Project"></p><p>picked up Web API</p><p><img src="https://farm8.staticflickr.com/7649/26988369191_7b0369cf04_o.png" alt="New ASP.NET Core Web Application (.NET Core)"></p><p>Finally, I started the port which took me something like two to three hours!</p><p>I ended up with the following code for the <em>Program.cs</em> file. The interesting part is the <strong>UseUrls()</strong> which I didn’t have while trying to make it run with Docker, then it wasn’t bound to the right network, and the application wasn’t accessible outside of the Docker container.</p><script src="//gist.github.com/38b53ab6c53b15a9630580b6115d2067.js?file=Program.cs"></script><p>Then I had some difficulties to have <a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing" target="_blank" rel="noopener">CORS</a> working the way I wanted, but in fact, it ended up being an issue of returning JSON from my HipChat Connect GetGlance method. So it is quite easy to configure it in the <em>Configure()</em> method.</p><script src="//gist.github.com/38b53ab6c53b15a9630580b6115d2067.js?file=Startup.cs"></script><p>Next step was to port from NancyFx module to ASP.NET Core RC2 controller, which was quite natural with the <em>Route</em>, <em>HttpGet</em>, <em>HttpPost</em>, <em>FromBody</em> and <em>FromQuery</em> attributes. The main point of interest is the <strong>ValidateToken()</strong> method which validates a JWT token using a <strong>SymmetricSecurityKey</strong>, and that wasn’t straight!</p><script src="//gist.github.com/38b53ab6c53b15a9630580b6115d2067.js?file=HipChatConnectController.cs"></script><p>To be able to test the HipChat Connect add-on, I needed to be able to expose my application from my local development machine to the internet so that I can add the add-on to one HipChat room and for that I used <a href="https://ngrok.com/" target="_blank" rel="noopener">ngrok</a>!</p><p>Using the same ngrok command I used for NancyFx with ASP.NET Core RC2 gave me as a result “<em>Http Bad Request error while calling your end point!</em>“</p><blockquote><p>ngrok http -bind-tls=true 8080</p></blockquote><p>To be able to make it work with ASP.NET Core RC2 I had to fine tune the command so that the host header is adapted, then it worked!</p><blockquote><p>ngrok http -bind-tls=true -host-header=”localhost:52060” 52060</p></blockquote><p>And to finish, I wanted to have the project running in a Docker container using <a href="http://laurentkempe.com/2016/04/30/Docker-for-Windows-Beta-review/">Docker for Windows</a>. To achieve that goal I used the following <em>Dockerfile</em></p><script src="//gist.github.com/38b53ab6c53b15a9630580b6115d2067.js?file=Dockerfile"></script><p>Built the Docker image with</p><blockquote><p>docker build -t hipchatconnect .</p></blockquote><p>Then started the Docker container with</p><blockquote><p>docker run -d -p 5000:5000 –name hipchatconnect hipchatconnect</p></blockquote><p>Checked that I could access my first ASP.NET Core RC2 project running in Docker with the following url:</p><blockquote><p><a href="http://docker:5000/hipchat/atlassian-connect.json" target="_blank" rel="noopener">http://docker:5000/hipchat/atlassian-connect.json</a></p></blockquote><p>You might be also interested to read the following post <a href="https://blog.docker.com/2016/05/docker-net-core-clr-rc2/" target="_blank" rel="noopener">“Docker and .NET Core CLR Release Candidate 2”</a> by <a href="https://blog.docker.com/author/mano/" target="_blank" rel="noopener">Mano Marks</a>.</p><p>To expose the container using ngrok I had to use:</p><blockquote><p>ngrok http -bind-tls=true -host-header=”docker:5000” docker:5000</p></blockquote><p>After adding the add-on to one of our room, the final result is a <a href="https://developer.atlassian.com/hipchat/getting-started#GettingStarted-AddstatustoHipChatroomsviaGlances" target="_blank" rel="noopener">HipChat Connect Glance</a> showing the number of our TeamCity builds and their states.</p><p><img src="https://farm8.staticflickr.com/7598/26989288911_6a7439863d_o.png" alt="HipChat Connect add-on based on ASP.NET Core RC2"></p><p>As a conclusion, to that especially long post, I am so happy that I could finally play with the ASP.NET Core RC2 bits, run a little Web application on my Windows 10 machine but also in a Linux Docker container using Docker for Windows! I love those two technologies and see a bright future for both of them. I am also delighted that Microsoft made .NET Core an open source project.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This weekend ASP.NET Core RC2 was starting to show up! And it finally was &lt;a href=&quot;https://blogs.msdn.microsoft.com/webdev/2016/05/16/announcing-asp-net-core-rc2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;released today&lt;/a&gt;. Get it fresh from &lt;a href=&quot;https://www.microsoft.com/net/core&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;. We had here a long three days weekend with quite awful gray clouds and cold weather for the season, so a perfect excuse to get started!&lt;br&gt;
    
    </summary>
    
    
      <category term="ASP.NET Core RC2" scheme="https://laurentkempe.com/tags/ASP-NET-Core-RC2/"/>
    
      <category term="Docker" scheme="https://laurentkempe.com/tags/Docker/"/>
    
      <category term="HipChat Connect" scheme="https://laurentkempe.com/tags/HipChat-Connect/"/>
    
  </entry>
  
  <entry>
    <title>Docker for Windows Beta review</title>
    <link href="https://laurentkempe.com/2016/04/30/Docker-for-Windows-Beta-review/"/>
    <id>https://laurentkempe.com/2016/04/30/Docker-for-Windows-Beta-review/</id>
    <published>2016-04-30T09:27:50.000Z</published>
    <updated>2018-05-29T15:42:44.717Z</updated>
    
    <content type="html"><![CDATA[<p>I have been playing with all Docker tools for quite some time now! Started with the command line and all its commands like docker start,  stop, ps, etc… Then I tried Kitematic and even compiled it from the source before it was supporting Windows! Then Docker Toolbox.<br><a id="more"></a><br>Two weeks ago I got access to Docker for Windows Beta, so first I uninstalled all the previous things I installed like VirtualBox, boot2docker, Docker Toolbox, even if it is supported to run in parallel with Docker for Windows. I was delighted to read that it supports Hyper-V which is a much better solution for us on Windows. Especially developers who need to run phone emulators which most of the time use Hyper-V! No more reboot tricks to turn it on or off.</p><p>My first impressions are very positive! The overall experience is much easier, and you can get started very fast. Downloading and running your first Docker images is done in some minutes now!</p><p>You now get a nice icon in the Windows notification area </p><p><img src="https://farm2.staticflickr.com/1673/26661310031_9bc569e24a_o.png" alt="Docker for Windows Tray icon"></p><p>Currently, it lets you control only a few things like Memory allocation, Automatical start, Checks for update but also, the interesting Manage shared drives</p><p><img src="https://farm2.staticflickr.com/1510/26661257341_11374f368c_o.png" alt="Docker for Windows Settings"></p><p>Till now the updates are coming at a good pace!</p><p>You can also use the entry Dashboard to download Kitematic which will let you control Docker through an interface and makes it even easier to download images and start/stop containers!</p><p><img src="https://farm2.staticflickr.com/1515/26701373396_487ce0187a_o.png" alt="Kitematic"></p><p>And the other great experience is that now you just start your command line and type your docker commands, and it just works!</p><p><img src="https://farm2.staticflickr.com/1538/26660797101_605058c25f_o.png" alt="Docker on the Command Line"></p><p>Another nice improvement is that now you can access your containers with a simple URL like <a href="http://docker.local:32769/" target="_blank" rel="noopener">http://docker.local:32769/</a> </p><p>Overall a great new experience and to me, it goes in the right direction.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I have been playing with all Docker tools for quite some time now! Started with the command line and all its commands like docker start,  stop, ps, etc… Then I tried Kitematic and even compiled it from the source before it was supporting Windows! Then Docker Toolbox.&lt;br&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://laurentkempe.com/tags/Docker/"/>
    
      <category term="Visual Studio" scheme="https://laurentkempe.com/tags/Visual-Studio/"/>
    
      <category term="Windows" scheme="https://laurentkempe.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Ease Github Pull Request code review</title>
    <link href="https://laurentkempe.com/2016/04/18/Ease-Github-Pull-Request-code-review/"/>
    <id>https://laurentkempe.com/2016/04/18/Ease-Github-Pull-Request-code-review/</id>
    <published>2016-04-18T13:21:47.000Z</published>
    <updated>2018-05-29T15:42:44.721Z</updated>
    
    <content type="html"><![CDATA[<p>Even if online <a href="https://help.github.com/articles/using-pull-requests/" target="_blank" rel="noopener">Github Pull Request</a> is a nice and effective tool, in some situation you need to open your solution in Visual Studio to verify something.<br><a id="more"></a><br>One evening, I created a project called <a href="https://github.com/laurentkempe/PReview" target="_blank" rel="noopener">PReview</a> which after you feed it with a diff file lets you filter Visual Studio Solution Explorer with all files changed. It is really alpha and a quick one evening hack!</p><p>The other day my colleague <a href="https://twitter.com/gianluigiconti" target="_blank" rel="noopener">Gianluigi</a> proposed to my team an alternative with a PowerShell script which you would run specifying the Pull Request id and the branch name:</p><blockquote><p>review 272 feature/1270-show-hide-panels</p></blockquote><p>Nice! The script is good but as I am spending a bit more than a day of work working on a running train with an unstable internet connection I needed something that would work offline too. So I thought there should be a way that would fulfill that requirement!</p><p>I ended up with something really easy which also leverage the nice possibility of <a href="https://github.com/laurentkempe/GitDiffMargin" target="_blank" rel="noopener">GitDiffMargin</a> to see changes in Visual Studio margin.</p><p>Basically, you create a new branch at the beginning of the branch that you want to review. Then you merge the original branch into the review branch with the squash option.</p><p>Let’s see a concrete example with my project <a href="https://github.com/laurentkempe/nubot" target="_blank" rel="noopener">Nubot</a>. Our goal is to review the branch called feature/hipchat-connect.<br>First, we need to find the SHA1 of the previous commit of the start of the branch feature/hipchat-connect. You might use a tool like <a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">SourceTree</a> </p><p><img src="https://farm2.staticflickr.com/1570/25900395853_1312aa8129_o.png" alt="Ease Github Pull Request Code Review 1"></p><p>or with a nice git alias </p><blockquote><p>lg = log –color –graph –pretty=format:’%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset’ –abbrev-commit –</p></blockquote><p><img src="https://farm2.staticflickr.com/1533/25900395843_2bc52142b8_o.png" alt="Ease Github Pull Request Code Review 2"></p><p>On both screenshots, we see that the SHA1 of the commit is <strong>4d6a5d1</strong></p><p>So now we create our new review branch</p><blockquote><p>git checkout -b review/hipchat-connect 4d6a5d1</p></blockquote><p>Then we squash the original branch into the review one</p><blockquote><p> git merge –squash feature/hipchat-connect</p></blockquote><p>Now opening Visual Studio you can go to the Solution Explorer and click on Pending Changes Filter and you will get the list of file modified</p><p><img src="https://farm2.staticflickr.com/1445/26410906852_75b2c64267_o.png" alt="Ease Github Pull Request Code Review 3"></p><p>And on the source code, you will see the changes thanks to <a href="https://visualstudiogallery.msdn.microsoft.com/cf49cf30-2ca6-4ea0-b7cc-6a8e0dadc1a8" target="_blank" rel="noopener">GitDiffMargin</a></p><p><img src="https://farm2.staticflickr.com/1535/25900395813_bc5efee43e_o.png" alt="Ease Github Pull Request Code Review 4"></p><p>You have now all your current tools to navigate your code and do even easier code review!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Even if online &lt;a href=&quot;https://help.github.com/articles/using-pull-requests/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github Pull Request&lt;/a&gt; is a nice and effective tool, in some situation you need to open your solution in Visual Studio to verify something.&lt;br&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://laurentkempe.com/tags/Git/"/>
    
      <category term="Visual Studio" scheme="https://laurentkempe.com/tags/Visual-Studio/"/>
    
      <category term="GitHub" scheme="https://laurentkempe.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Hosting nugets in TeamCity</title>
    <link href="https://laurentkempe.com/2016/04/14/Hosting-nugets-in-TeamCity/"/>
    <id>https://laurentkempe.com/2016/04/14/Hosting-nugets-in-TeamCity/</id>
    <published>2016-04-14T20:04:11.000Z</published>
    <updated>2018-05-29T15:42:44.749Z</updated>
    
    <content type="html"><![CDATA[<p>In the past in my team, we were storing the Telerik assemblies into our SVN repository then in Git! I wasn’t happy about that for a really long time. Each releases our repository was growing much more than it was needed for nothing!<br><a id="more"></a><br>One day Telerik shipped their great WPF controls as nugets which solved half of our problem! Now the next problem was where do we store those nugets so that we can get those back. Searching a bit we found some solutions like <a href="https://myget.org/" target="_blank" rel="noopener">myget</a> but we wanted one which we could host on our infrastructure. After some more research, we found ou that TeamCity, could work as a <a href="https://confluence.jetbrains.com/display/TCD9/NuGet#NuGet-UsingTeamCityasNuGetServer" target="_blank" rel="noopener">Nuget server</a>.</p><p>That was just perfect because we have been using TeamCity from day 1 of the project. We finally go the  second half of our solution.</p><p>You first need to activate the Nuget server on TeamCity:</p><p><img src="https://farm2.staticflickr.com/1674/26338964882_405d486347_o.png" alt="tc-nuget-server-1"></p><p>We have activated the guest account so that the Nuget feed URL is accessible without any credentials. We use it on our LAN so that’s not really an issue for us. But it also works with credentials if you want.</p><p>The way TeamCity works with Nuget server is quite easy: any artifacts resolved after a build are then available through the Nuget server.</p><p>So next step was to define how to we bring a new version of the Telerik nugets when they ship a new version.</p><p><img src="https://farm2.staticflickr.com/1441/26365113121_7f3047a0da_o.png" alt="tc-nuget-server-2"></p><p>Again easy, just configure a build which takes the .nupkg from one folder and then bundle those as a build artifact.</p><p><img src="https://farm2.staticflickr.com/1671/25828490813_5a089e7001_o.png" alt="tc-nuget-server-3"></p><p>So when Telerik release a new version we just need to upload all the .nupkg files to the folder <em>C:\Telerik\</em> and run the build!</p><p>One more step in the good direction of automation!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In the past in my team, we were storing the Telerik assemblies into our SVN repository then in Git! I wasn’t happy about that for a really long time. Each releases our repository was growing much more than it was needed for nothing!&lt;br&gt;
    
    </summary>
    
    
      <category term=".NET Development" scheme="https://laurentkempe.com/tags/NET-Development/"/>
    
      <category term="continuous integration" scheme="https://laurentkempe.com/tags/continuous-integration/"/>
    
  </entry>
  
  <entry>
    <title>Upload files to DropBox from PowerShell</title>
    <link href="https://laurentkempe.com/2016/04/07/Upload-files-to-DropBox-from-PowerShell/"/>
    <id>https://laurentkempe.com/2016/04/07/Upload-files-to-DropBox-from-PowerShell/</id>
    <published>2016-04-07T19:41:32.000Z</published>
    <updated>2018-05-29T15:42:44.871Z</updated>
    
    <content type="html"><![CDATA[<p>When I <a href="http://laurentkempe.com/2016/04/05/Moving-to-Cake-CSharp-Make/">migrated our build to Cake (C# Make)</a> we had one requirement which was to upload some of the build output’s artifacts to DropBox at the end of the build.<br><a id="more"></a><br>I searched for that kind of capabilities in Cake reference documentation but couldn’t find anything out of the box.</p><p>I could have gone to write my own add-in but I found the <a href="http://cakebuild.net/addins/category/powershell" target="_blank" rel="noopener">PowerShell</a> one, great!<br>So I decided that I could write a little PowerShell script to achieve that upload to DropBox.</p><p>Here it is</p><script src="//gist.github.com/9e71a307e1d216d17e5adf1589e51c5e.js?file=dropbox-upload.ps1"></script><p>The script is getting one environment variable <em>DropBoxAccessToken</em>, which represents the DropBox access token because I don’t want to see the access token logged into our TeamCity logs.</p><p>One gotcha from <a href="https://www.dropbox.com/developers/documentation/http/documentation#files-upload" target="_blank" rel="noopener">DropBox REST API upload documentation</a> which hit me was how to upload to a business account? In fact, it is really easy, you just need to create an application for your business account with permission full!</p><p>Warning, I do not consider myself as a PowerShell expert, I am more of a kind of PowerShell hacker, so take this script with all precautions.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;When I &lt;a href=&quot;http://laurentkempe.com/2016/04/05/Moving-to-Cake-CSharp-Make/&quot;&gt;migrated our build to Cake (C# Make)&lt;/a&gt; we had one requirement which was to upload some of the build output’s artifacts to DropBox at the end of the build.&lt;br&gt;
    
    </summary>
    
    
      <category term="continuous integration" scheme="https://laurentkempe.com/tags/continuous-integration/"/>
    
      <category term="PowerShell" scheme="https://laurentkempe.com/tags/PowerShell/"/>
    
  </entry>
  
  <entry>
    <title>Moving to Cake (C# Make)</title>
    <link href="https://laurentkempe.com/2016/04/05/Moving-to-Cake-CSharp-Make/"/>
    <id>https://laurentkempe.com/2016/04/05/Moving-to-Cake-CSharp-Make/</id>
    <published>2016-04-05T15:46:28.000Z</published>
    <updated>2018-05-29T15:42:44.792Z</updated>
    
    <content type="html"><![CDATA[<p>I finally invested time to migrate our build from a heteroclite mixture of  MSBuild, TeamCity build steps and whatever to something that really delight me: <a href="http://cakebuild.net/" target="_blank" rel="noopener">Cake (C# Make)</a>.<br><a id="more"></a></p><p>I tried in the past several other systems like PSake, Fake… Never grasped those and gave up quite quickly.</p><p>This time, two triggers pushed me to look further:</p><p></p><p></p><ol><li>We had to build a patch and someone deactivated <a href="http://laurentkempe.com/2014/12/13/TeamCity-9-project-settings-versioning-in-Git/">TeamCity project settings versioning in Git</a> so we could not get back the settings and could not build on TeamCity, too bad!</li><li>We were working on improving the performance of our build by going to NUnit 3 and trying to run our specifications, integrations and unit tests in parallel.</li></ol><p>For long I was the advocate of versioning our build script with the source code but never got the time to finally do it. I guess you need a bit of pain to trigger some changes.</p><p>So last week I prepared a small presentation to my great team which I presented this last Monday. You can have a look that presentation <a href="https://sway.com/G8xS5gVqbwOA9euI" target="_blank" rel="noopener">here</a>.</p><p>Most of the slides are coming from the Cake documentation provided by the team behind this great project!</p><p>I would like to put some emphasis on one part which is not coming from Cake documentation which is: <strong>Why Cake?</strong></p><p></p>  <p></p><ul><li><strong>Unify</strong> our build process</li><li><strong>Versioning</strong> the build script <strong>with the source code</strong> of the application</li><li>Being able to <strong>run</strong> our build <strong>where we want</strong><ul><li>Any machine with .NET framework, good for our escrow process</li><li>Our TeamCity build server</li><li>New cloud build services like AppVeyor, Visual Studio Team Services…</li></ul></li><li><strong>It is C#</strong>. In the past we looked at PSake, Fake.. but never really grasped those</li><li>Coming with almost all <a href="http://cakebuild.net/dsl" target="_blank" rel="noopener">tools</a>, <a href="http://cakebuild.net/addins?path=contributing%252Fguidelines" target="_blank" rel="noopener">add-ins</a> we need for our build process. Missing NDepend which stays as a TeamCity build at the moment.</li><li><strong>Open source</strong> and <strong>great responsive community</strong> on <a href="https://gitter.im/cake-build/cake" target="_blank" rel="noopener">Gitter chat</a></li><li>No need to version binaries</li><li>Syntax Highlighting in Visual Studio Code</li></ul><p>One point to take away from that list is <strong>great responsive community</strong> and nothing proves it more than <a href="https://gitter.im/cake-build/cake?at=57024151d39de41b49604f5e" target="_blank" rel="noopener">this discussion</a> and that <a href="https://github.com/cake-build/cake/issues/805" target="_blank" rel="noopener">pull request</a> which fixes an issue we just found and reported. The fix came the same day and will be available in the next patch release, great job. </p><p>So our current situation is much better now!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I finally invested time to migrate our build from a heteroclite mixture of  MSBuild, TeamCity build steps and whatever to something that really delight me: &lt;a href=&quot;http://cakebuild.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cake (C# Make)&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
      <category term=".NET Development" scheme="https://laurentkempe.com/tags/NET-Development/"/>
    
      <category term="continuous integration" scheme="https://laurentkempe.com/tags/continuous-integration/"/>
    
  </entry>
  
  <entry>
    <title>Rebooting my blog</title>
    <link href="https://laurentkempe.com/2016/03/29/Rebooting-my-blog/"/>
    <id>https://laurentkempe.com/2016/03/29/Rebooting-my-blog/</id>
    <published>2016-03-29T18:18:33.000Z</published>
    <updated>2018-05-29T15:42:44.822Z</updated>
    
    <content type="html"><![CDATA[<p>After almost 6 years using <a href="http://dotnetblogengine.net/" target="_blank" rel="noopener">BlogEngine.NET</a> and a bit more of a year without any new post I decided that it was time to reboot my blog!<br><a id="more"></a><br>My first choice was to go with a static website/blog tool! One reason was that I didn’t want to deal with the hosting anymore.</p><p>I started to explore the possibility to use <a href="https://jekyllrb.com/" target="_blank" rel="noopener">jekyll</a> but after quite some issues to make it work on Windows I decided to forget about it.</p><p>Then searching for several other solutions, and there are a lot, see <a href="https://www.staticgen.com/" target="_blank" rel="noopener">StaticGen</a>, I opted for <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo.io</a> because I had already <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a> installed on my machine and Hexo was quite fast and easy to use. I also could find a very nice responsive theme named <a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak" target="_blank" rel="noopener">hexo-theme-tranquilpeak</a>.</p><p>In the meantime, I had to write a bit of software to automate to the maximum the migration process because it would have been too much work to do by hand, and for sure I prefer to let computers do the work.</p><p>Jump forward a couple of months and here we are!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;After almost 6 years using &lt;a href=&quot;http://dotnetblogengine.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BlogEngine.NET&lt;/a&gt; and a bit more of a year without any new post I decided that it was time to reboot my blog!&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TeamCity 9 project settings versioning in Git</title>
    <link href="https://laurentkempe.com/2014/12/13/TeamCity-9-project-settings-versioning-in-Git/"/>
    <id>https://laurentkempe.com/2014/12/13/TeamCity-9-project-settings-versioning-in-Git/</id>
    <published>2014-12-13T02:16:58.000Z</published>
    <updated>2014-12-13T02:39:12.000Z</updated>
    
    <content type="html"><![CDATA[<!-- [![Anse Cafard](https://farm8.staticflickr.com/7480/16005747085_1d45cdda13_m.jpg)](https://www.flickr.com/photos/laurentkempe/16005747085 "Anse Cafard by Laurent Kempé, on Flickr") --><p>One of the great new feature of <a href="https://confluence.jetbrains.com/display/TCD9/What%27s+New+in+TeamCity+9.0" target="_blank" rel="noopener">TeamCity 9</a> is the possibility of <a href="https://confluence.jetbrains.com/display/TCD9/What%27s+New+in+TeamCity+9.0#What%27sNewinTeamCity9.0-StoringprojectsettingsinGitandMercurial" target="_blank" rel="noopener">Storing project settings in Git and Mercurial</a>.</p><p>When you develop software it is primordial to be able to reproduce successfully builds. To achieve that goal you need for sure first to version the source code. But too often the build scripts are forgotten! Especially when the build scripts are created with such a great tool that is <a href="https://www.jetbrains.com/teamcity/" target="_blank" rel="noopener">TeamCity</a>.<br><a id="more"></a></p><p>So we want to keep the source code and the configuration of the build server quite near. So that we are sure we can always rebuild a previous version of the software.</p><p>What we don’t want is to have a mixture of source code and build configurations. To achieve that goal we can use the Git possibility to <a href="http://git-scm.com/docs/git-checkout/" target="_blank" rel="noopener">create orphan branch</a></p><blockquote><p>git checkout –orphan teamcity/settings</p></blockquote><p>Then we remove all content from the old working tree, normally your current source code. No worries, the other files are kept in the other branches!</p><blockquote><p>git rm -rf .</p></blockquote><p>We add a ReadMe.md explaining that this branch is about storing the build server settings and we make a first commit</p><blockquote><p>git add ReadMe.md<br>git commit -m “Initial TeamCity build settings commit”</p></blockquote><p>And finally we push that to the origin git repository</p><blockquote><p>git push origin teamcity/settings</p></blockquote><p>Now on your TeamCity server you can follow the instruction in <a href="https://confluence.jetbrains.com/display/TCD9/Storing+Project+Settings+in+Version+Control" target="_blank" rel="noopener">Storing Project Settings in Version Control</a> to define that TeamCity must version all changes which are done to your project.</p><p>We do it on the top most project so that we get all stored in our Git repository.</p><p>To achieve that we define a new TeamCity VCS Root pointing to our newly created orphaned branch; teamcity/settings and finally click the Apply button.</p><p>After some seconds you will get in your Git repository a second commit done by TeamCity containing all the configurations files!</p><p>Nice new feature!</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- [![Anse Cafard](https://farm8.staticflickr.com/7480/16005747085_1d45cdda13_m.jpg)](https://www.flickr.com/photos/laurentkempe/16005747085 &quot;Anse Cafard by Laurent Kempé, on Flickr&quot;) --&gt;
&lt;p&gt;One of the great new feature of &lt;a href=&quot;https://confluence.jetbrains.com/display/TCD9/What%27s+New+in+TeamCity+9.0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TeamCity 9&lt;/a&gt; is the possibility of &lt;a href=&quot;https://confluence.jetbrains.com/display/TCD9/What%27s+New+in+TeamCity+9.0#What%27sNewinTeamCity9.0-StoringprojectsettingsinGitandMercurial&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Storing project settings in Git and Mercurial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When you develop software it is primordial to be able to reproduce successfully builds. To achieve that goal you need for sure first to version the source code. But too often the build scripts are forgotten! Especially when the build scripts are created with such a great tool that is &lt;a href=&quot;https://www.jetbrains.com/teamcity/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TeamCity&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://laurentkempe.com/tags/Git/"/>
    
      <category term="Team City" scheme="https://laurentkempe.com/tags/Team-City/"/>
    
  </entry>
  
  <entry>
    <title>Git Diff Margin v3.0 released</title>
    <link href="https://laurentkempe.com/2014/09/24/Git-Diff-Margin-v30-released/"/>
    <id>https://laurentkempe.com/2014/09/24/Git-Diff-Margin-v30-released/</id>
    <published>2014-09-24T06:04:39.000Z</published>
    <updated>2014-09-24T06:16:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>25 Days after the v2.0 I am pleased to announce the v3.0 of <a href="http://visualstudiogallery.msdn.microsoft.com/cf49cf30-2ca6-4ea0-b7cc-6a8e0dadc1a8" target="_blank" rel="noopener">Git Diff Margin</a>!</p><p><strong><a href="http://visualstudiogallery.msdn.microsoft.com/cf49cf30-2ca6-4ea0-b7cc-6a8e0dadc1a8" target="_blank" rel="noopener">Git Diff Margin</a> displays live Git changes of the currently edited file on Visual Studio margin and scroll bar.</strong><br><a id="more"></a></p><p>Thanks to the great work of <a href="https://github.com/sharwell" target="_blank" rel="noopener">Sam Harwell</a> Git Diff Margin v3.0 now support Visual Studio 2010, 2012, 2013 and Visual Studio 14 “CTP”.</p><p>Here are the release notes </p><h3 id="New-features"><a href="#New-features" class="headerlink" title="New features"></a>New features</h3><ul><li>Support for Visual Studio 2010, 2012 and Visual Studio 14 “CTP” </li><li>Show diff using Visual Studio Diff window except for Visual Studio 2010 which still use external diff tool </li><li>Possibility to define shortcuts for next/previous change navigation </li><li>Add options for highlighting untracked lines <a href="https://github.com/laurentkempe/GitDiffMargin/issues/29" target="_blank" rel="noopener">#29</a> </li><li>Update icons   </li></ul><h3 id="Improvements"><a href="#Improvements" class="headerlink" title="Improvements"></a>Improvements</h3><ul><li>Improve external diff configuration handling in .gitconfig <a href="https://github.com/laurentkempe/GitDiffMargin/issues/32" target="_blank" rel="noopener">#32</a> </li><li>Improve “removed” glyph and editor diff positioning </li><li>Improve support of Dark, Light and Blue theme </li><li>Make sure the text editor is focused after a rollback </li><li>Prevent ScrollDiffMargin from affecting the scroll bar behavior </li><li>Play nice with other source control providers   </li></ul><h3 id="Fixes"><a href="#Fixes" class="headerlink" title="Fixes"></a>Fixes</h3><ul><li>Fix Show Difference fails with DiffMerge for file names with spaces <a href="https://github.com/laurentkempe/GitDiffMargin/issues/38" target="_blank" rel="noopener">#38</a> </li><li>Fix submodules issue <a href="https://github.com/laurentkempe/GitDiffMargin/issues/40" target="_blank" rel="noopener">#40</a>   </li></ul><p><img src="https://c4.staticflickr.com/4/3893/15335334635_a88dc1f271.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;25 Days after the v2.0 I am pleased to announce the v3.0 of &lt;a href=&quot;http://visualstudiogallery.msdn.microsoft.com/cf49cf30-2ca6-4ea0-b7cc-6a8e0dadc1a8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git Diff Margin&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://visualstudiogallery.msdn.microsoft.com/cf49cf30-2ca6-4ea0-b7cc-6a8e0dadc1a8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git Diff Margin&lt;/a&gt; displays live Git changes of the currently edited file on Visual Studio margin and scroll bar.&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Visual Studio" scheme="https://laurentkempe.com/tags/Visual-Studio/"/>
    
  </entry>
  
  <entry>
    <title>Git Diff Margin v2.0 released</title>
    <link href="https://laurentkempe.com/2014/08/29/Git-Diff-Margin-v20-released/"/>
    <id>https://laurentkempe.com/2014/08/29/Git-Diff-Margin-v20-released/</id>
    <published>2014-08-29T15:50:54.000Z</published>
    <updated>2014-08-29T15:58:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>I am pleased to announce that Git Diff Margin v2.0 is released!</p><p><strong>Git Diff Margin displays live changes of the currently edited file on Visual Studio 2013 margin and scroll bar.</strong><br><a id="more"></a></p><p>You can download it from <a href="http://visualstudiogallery.msdn.microsoft.com/cf49cf30-2ca6-4ea0-b7cc-6a8e0dadc1a8" target="_blank" rel="noopener">Visual Studio Gallery</a> and get the <a href="https://github.com/laurentkempe/GitDiffMargin" target="_blank" rel="noopener">source code on Github</a></p><p>Here is a screenshot</p><p><img src="https://farm6.staticflickr.com/5584/14880092457_abbc10be17_o.png" alt=""></p><p>And a 30 seconds video</p><object type="application/x-shockwave-flash" width="400" height="225" data="https://www.flickr.com/apps/video/stewart.swf" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"><br><br><embed type="application/x-shockwave-flash" src="https://www.flickr.com/apps/video/stewart.swf" bgcolor="#000000" allowfullscreen="true" flashvars="intl_lang=en-US&photo_secret=9eaafc61f6&photo_id=14879945429" width="400" height="225"></object><p>It’s features</p><ul><li><p>Quickly view all current file changes on      </p><ul><li>Left margin </li><li><p>Scroll Bars in map and bar mode with and without source overview          </p></li><li><p>blue rectangle for modifications </p></li><li>green rectangles for new lines </li><li>red triangles for deletions </li><li>all colors configurable through Visual Studio Fonts and Colors options           </li></ul></li><li>Undo the change </li><li>Copy the old code into the clipboard </li><li>Copy a part of the old code by selecting it in the popup </li><li>Show the diff in configured Git external diff tool </li><li>Navigate to previous/next change on the file </li><li>Support Visual Studio 2013 Dark, Light and Blue Theme </li><li>Support zoom </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I am pleased to announce that Git Diff Margin v2.0 is released!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Git Diff Margin displays live changes of the currently edited file on Visual Studio 2013 margin and scroll bar.&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Visual Studio" scheme="https://laurentkempe.com/tags/Visual-Studio/"/>
    
  </entry>
  
  <entry>
    <title>Using TeamCity integrated dotCover coverage files with NDepend</title>
    <link href="https://laurentkempe.com/2013/11/29/Using-TeamCity-integrated-dotCover-coverage-files-with-NDepend/"/>
    <id>https://laurentkempe.com/2013/11/29/Using-TeamCity-integrated-dotCover-coverage-files-with-NDepend/</id>
    <published>2013-11-29T17:55:49.000Z</published>
    <updated>2013-11-29T21:21:02.000Z</updated>
    
    <content type="html"><![CDATA[<!-- [![Byron Bay 2013-08-26 038_DxO](http://farm3.staticflickr.com/2869/11098125944_08a562bd51_m.jpg)](http://www.flickr.com/photos/laurentkempe/11098125944/ "Byron Bay 2013-08-26 038_DxO by Laurent Kempé, on Flickr")--><p>For a long time I wanted to integrated <a href="http://www.ndepend.com" target="_blank" rel="noopener">NDepend</a> on our build server so that this week I invested some time here and there to achieve that goal. I did that already a long time ago, I even wrote the documentation which you can read on <a href="http://www.ndepend.com/Doc_CI_TeamCity.aspx" target="_blank" rel="noopener">NDepend website</a>.<br><a id="more"></a></p><p>This time I wanted to go one step further. </p><p>We use a first build which is building each feature branch we are developing. One of the responsibility of that build is to run unit tests, integrations tests, specifications and gather code coverage. To achieve that we are using the <a href="http://confluence.jetbrains.com/display/TCD8/JetBrains+dotCover" target="_blank" rel="noopener">TeamCity integrated dotCover</a> in each build steps running our different tests. This is collecting artifacts which aren’t directly shown on the Artifacts tab:</p><p><img src="http://farm3.staticflickr.com/2836/11114221833_738e29571e_o.png" alt=""></p><p>Clicking show reveal the file we are interested about, dotCover.snapshot:</p><p><img src="http://farm3.staticflickr.com/2833/11114229113_b46ec7804e_o.png" alt=""></p><p>Something to note is that to be able to use code coverage NDepend needs the pdb files, this is why we have another artifact named PDBs.zip. And finally the third is our software with the exe and dlls.</p><p>Now that we have a build which generate the coverage file which we want to pass to NDepend, let’s create another TeamCity build which will define Snapshot Dependency and Artifact Dependency to the previous build:</p><p><img src="http://farm8.staticflickr.com/7363/11114582156_0605499626_o.png" alt=""></p><p>We are extracting the exe to a NDepend folder and all dlls out of the archive Libs folder to the same NDepend folder.<br>We do the same for the pdb files so that NDepend can use the code coverage data.<br>Finally we extract the dotCover.snapshot to a dotCover folder.</p><p>Then the issue we had was that the dotCover.snapshot file is not of the format that NDepend is expecting.</p><p>So as a first build step of our NDepend build we need to convert dotCover.snapshot file, this is done using a Command Line build step and dotCover integrated in TeamCity, using the <a href="http://www.jetbrains.com/dotcover/webhelp/dotCover__Console_Runner_Commands.html" target="_blank" rel="noopener">report command</a> and the ReportType equal to NDependXML:</p><p><img src="http://farm4.staticflickr.com/3679/11115318034_55d5175a9a_o.png" alt=""></p><p>So after that build first step we have a new converted file; dotCoverNDepend.xml which can be consumed by NDepend.</p><p>Then in the second build step we are using dotCoverNDepend.xml with the new NDepend 5.1 CoverageFiles command parameter:</p><p><img src="http://farm8.staticflickr.com/7364/11115499383_e14d7b48f7_o.png" alt=""></p><p>Here is the full command</p><blockquote><p>C:\NDepend\NDepend.Console.exe “%teamcity.build.checkoutDir%\skyeEditor.ndproj” /CoverageFiles “%teamcity.build.checkoutDir%\dotCover\dotCoverNDepend.xml” /InDirs “%teamcity.build.checkoutDir%\NDepend” “C:\Windows\Microsoft.NET\Framework\v4.0.30319” “C:\Windows\Microsoft.NET\Framework\v4.0.30319\WPF” /OutDir “C:\NDependOutput”</p></blockquote><p>This will create the NDepend report which we will archive as an artifact, on the General Settings of the build</p><p><img src="http://farm6.staticflickr.com/5491/11115423854_92c437b8d4_o.png" alt=""></p><p>Then you will need to define that you want to see the NDepend report as a TeamCity Report Tab, which you define by navigating to Administration &gt; Report Tabs, clicking Create new report tab and specifying</p><p><img src="http://farm6.staticflickr.com/5533/11115432286_aa8423bdc1_o.png" alt=""></p><p>Finally you will have the following NDepend report with code coverage shown for your builds</p><p><img src="http://farm3.staticflickr.com/2849/11115450035_9bf0cefdcb_o.png" alt=""></p><p>One last thing I struggled about is that the NDepend builds were not started, because I thought it was enough to configure the Dependencies, but you need to define also a Build Trigger with Trigger on changes in snapshot dependencies ticked:</p><p><img src="http://farm6.staticflickr.com/5493/11115554176_63214bac84_o.png" alt=""></p><p>Thanks to <strong>Yegor </strong>for the discussion which greatly helped as always! And also to <strong>Ruslan</strong> which also helped through <a href="http://devnet.jetbrains.com/message/5504378#5504378" target="_blank" rel="noopener">the post on the jetbrains forum</a>. And finally thanks to <a href="http://codebetter.com/patricksmacchia/" target="_blank" rel="noopener"><strong>Patrick</strong></a> who introduced really fast the <a href="http://ndepend.uservoice.com/forums/226344-ndepend-user-voice/suggestions/4897199-add-a-command-line-argument-to-depend-console-exe-" target="_blank" rel="noopener">/CoverageFiles in NDepend</a>, so do not hesitate to give feedback using the new <a href="http://ndepend.uservoice.com/forums/226344-ndepend-user-voice" target="_blank" rel="noopener">NDepend user voice</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- [![Byron Bay 2013-08-26 038_DxO](http://farm3.staticflickr.com/2869/11098125944_08a562bd51_m.jpg)](http://www.flickr.com/photos/laurentkempe/11098125944/ &quot;Byron Bay 2013-08-26 038_DxO by Laurent Kempé, on Flickr&quot;)--&gt;
&lt;p&gt;For a long time I wanted to integrated &lt;a href=&quot;http://www.ndepend.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NDepend&lt;/a&gt; on our build server so that this week I invested some time here and there to achieve that goal. I did that already a long time ago, I even wrote the documentation which you can read on &lt;a href=&quot;http://www.ndepend.com/Doc_CI_TeamCity.aspx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NDepend website&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
      <category term="Team City" scheme="https://laurentkempe.com/tags/Team-City/"/>
    
      <category term="NDepend" scheme="https://laurentkempe.com/tags/NDepend/"/>
    
      <category term="dotCover" scheme="https://laurentkempe.com/tags/dotCover/"/>
    
  </entry>
  
  <entry>
    <title>Optimizing release build process using JetBrains TeamCity and Atlassian Stash</title>
    <link href="https://laurentkempe.com/2013/10/17/Optimizing-release-build-process-using-JetBrains-TeamCity-and-Atlassian-Stash/"/>
    <id>https://laurentkempe.com/2013/10/17/Optimizing-release-build-process-using-JetBrains-TeamCity-and-Atlassian-Stash/</id>
    <published>2013-10-17T17:34:14.000Z</published>
    <updated>2013-10-17T19:55:36.000Z</updated>
    
    <content type="html"><![CDATA[<!-- [![Byron Bay Light House](http://farm8.staticflickr.com/7421/9599787416_582f4ab142_m.jpg)](http://www.flickr.com/photos/laurentkempe/9599787416/ "Byron Bay Light House by Laurent Kempé, on Flickr") -->   <p>Automating and optimizing the processes I use everyday to work is something important so that I get more productive and spend less time in things that a computer is better at.<br><a id="more"></a></p><p>Previously I had 3 builds defined in <a href="http://www.jetbrains.com/teamcity/" target="_blank" rel="noopener">TeamCity</a> one for all <a href="http://confluence.jetbrains.com/display/TCD8/Working+with+Feature+Branches" target="_blank" rel="noopener">feature branches</a>, one for release and one for patch. For feature branch and patch branch I needed to go to TeamCity to define two Build Parameters: the branch name and the release number.</p><p>My goal was to avoid to go to TeamCity when we have a release and have to set those <a href="http://confluence.jetbrains.com/display/TCD8/Configuring+Build+Parameters" target="_blank" rel="noopener">Build Parameters</a>.</p><p>I wanted one TeamCity build which would</p><ol><li>Determine automatically the version number </li><li>Determine the branch to use to build that release   </li></ol><p>The second point was easy! You just need to follow the same principles defined for <a href="http://confluence.jetbrains.com/display/TCD8/Working+with+Feature+Branches" target="_blank" rel="noopener">feature branches</a>. I defined the following branch naming convention: any release should have a branch name like this release/skye-editor-2.26.0 for a release of Skye Editor 2.26.0. Then I defined in my VCS Root of my TeamCity Build the branch specification:</p><blockquote><p>+:refs/heads/release/skye-editor-*</p></blockquote><p>and the same for the Build Triggers / VCS Trigger / Branch filter.</p><p>Now the first point is a bit more complex!</p><p>As we want to determine automatically the version number we quickly realize that the release number is defined in the branch name itself, e.g. release/skye-editor-<strong>2.26.0</strong>. </p><p>So why not use it? Yeah great idea but how? </p><p>First idea that came was to pass that value as a parameter to the build script and deal with splitting the branch name to the release number into the build script. As <a href="http://www.jetbrains.com/company/people/Yarko_Yegor.html" target="_blank" rel="noopener">Yegor</a> was confirming that currently TeamCity has no way to parse values. I didn’t really like that idea of passing that parameter! So I continued to think about alternatives and finally came to ask Yegor:</p><blockquote><p>I had another idea, in teamcity when the active builds are displayed for a feature branch build only the second part is displayed, e.g. if I specify as branch specification SKYE-* and I have a branch with SKYE-1077-blabla then it wil show 1077-blabla. Is there a build parameter which would map this 1077-blabla?</p></blockquote><p>And the answer was</p><blockquote><p>If you have something like refs/heads/SKYE-(*), then only the part in the brackets is regarded as logic branch name. Logic branch name is available as %teamcity.build.branch%</p></blockquote><p>That’s it! Thanks Yegor. We have the way to get our version without having to change our build script and without writing any code!</p><p>So I just used the logical branch name %teamcity.build.branch% as my configuration parameter CurrentRelease which was already existing and that I had to manually update before:</p><p><img src="http://farm4.staticflickr.com/3672/10324541816_1c57beaa6c_o.png" alt=""></p><p>Replacing the previous two manual configurations</p><p><img src="http://farm8.staticflickr.com/7453/10324571806_5a56729f3e_o.png" alt=""></p><p>So now I create easily a Git release branch; release/skye-editor-2.26.0, then use pull requests of <a href="https://www.atlassian.com/software/stash/overview" target="_blank" rel="noopener">Atlassian Stash</a> to review and merge my feature branches to that release branch which is automatically built using TeamCity.</p><p>This is a great improvement and shorten my release check list, all good!</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- [![Byron Bay Light House](http://farm8.staticflickr.com/7421/9599787416_582f4ab142_m.jpg)](http://www.flickr.com/photos/laurentkempe/9599787416/ &quot;Byron Bay Light House by Laurent Kempé, on Flickr&quot;) --&gt;   
&lt;p&gt;Automating and optimizing the processes I use everyday to work is something important so that I get more productive and spend less time in things that a computer is better at.&lt;br&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://laurentkempe.com/tags/Git/"/>
    
      <category term="Team City" scheme="https://laurentkempe.com/tags/Team-City/"/>
    
      <category term="Stash" scheme="https://laurentkempe.com/tags/Stash/"/>
    
  </entry>
  
</feed>
