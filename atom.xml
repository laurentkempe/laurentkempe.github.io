<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Laurent Kempé</title>
  
  <subtitle>One of the Tech Head Brothers</subtitle>
  <link href="https://laurentkempe.com/atom.xml" rel="self"/>
  
  <link href="https://laurentkempe.com/"/>
  <updated>2022-11-14T12:44:18.100Z</updated>
  <id>https://laurentkempe.com/</id>
  
  <author>
    <name>Laurent Kempé</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>.NET 7 SDK built-in container support and Ubuntu Chiseled</title>
    <link href="https://laurentkempe.com/2022/11/14/dotnet-7-sdk-built-in-container-support-and-ubuntu-chiseled/"/>
    <id>https://laurentkempe.com/2022/11/14/dotnet-7-sdk-built-in-container-support-and-ubuntu-chiseled/</id>
    <published>2022-11-14T12:40:41.000Z</published>
    <updated>2022-11-14T12:44:18.100Z</updated>
    
    
    <summary type="html">&lt;p&gt;End of summer 2022, the .NET team at Microsoft announced two things related to containers: .NET in Chiseled Ubuntu containers and then a week after built-in container support in the .NET 7 SDK. I have talked about both topics on two episodes of the French podcast &lt;a href=&quot;https://devdevdev.net/&quot;&gt;devdevdev.net&lt;/a&gt; by my friend &lt;a href=&quot;https://twitter.com/c2iClark&quot;&gt;Richard Clark&lt;/a&gt;. In this post, I will explain what those are and how to combine them.&lt;/p&gt;</summary>
    
    
    
    
    <category term="ASP.NET Core" scheme="https://laurentkempe.com/tags/ASP-NET-Core/"/>
    
    <category term="Docker" scheme="https://laurentkempe.com/tags/Docker/"/>
    
    <category term="Ubuntu" scheme="https://laurentkempe.com/tags/Ubuntu/"/>
    
    <category term=".NET SDK" scheme="https://laurentkempe.com/tags/NET-SDK/"/>
    
  </entry>
  
  <entry>
    <title>Experimenting with .NET 7, WASM, and WASI on Docker</title>
    <link href="https://laurentkempe.com/2022/10/31/experimenting-with-dotnet-7-wasm-and-wasi-on-docker/"/>
    <id>https://laurentkempe.com/2022/10/31/experimenting-with-dotnet-7-wasm-and-wasi-on-docker/</id>
    <published>2022-10-31T12:25:10.000Z</published>
    <updated>2022-11-14T12:44:18.100Z</updated>
    
    
    <summary type="html">&lt;p&gt;On October 24th, Docker announced the support of WASM and WASI in a new technical preview release. I wanted to try it out and see how it works with .NET 7. If you want to know more about WASM and WASI you can read the introduction from my previous post, “&lt;a href=&quot;https://laurentkempe.com/2022/10/29/using-wasm-and-wasi-to-run-dotnet-7-on-a-raspberry-pi-zero-2-w/&quot;&gt;Using WASM and WASI to run .NET 7 on a Raspberry PI Zero 2 W&lt;/a&gt;“.&lt;/p&gt;</summary>
    
    
    
    
    <category term=".NET" scheme="https://laurentkempe.com/tags/NET/"/>
    
    <category term="Docker" scheme="https://laurentkempe.com/tags/Docker/"/>
    
    <category term="WASM" scheme="https://laurentkempe.com/tags/WASM/"/>
    
    <category term="WASI" scheme="https://laurentkempe.com/tags/WASI/"/>
    
  </entry>
  
  <entry>
    <title>Using WASM and WASI to run .NET 7 on a Raspberry PI Zero 2 W</title>
    <link href="https://laurentkempe.com/2022/10/29/using-wasm-and-wasi-to-run-dotnet-7-on-a-raspberry-pi-zero-2-w/"/>
    <id>https://laurentkempe.com/2022/10/29/using-wasm-and-wasi-to-run-dotnet-7-on-a-raspberry-pi-zero-2-w/</id>
    <published>2022-10-29T09:04:42.000Z</published>
    <updated>2022-11-14T12:44:18.100Z</updated>
    
    
    <summary type="html">&lt;p&gt;WebAssembly (WASM) and WebAssembly System Interface (WASI) are opening new opportunities for developers. .NET developers became familiar with WASM when Blazor WebAssembly was released. Blazor WebAssembly runs client-side in the browser on a WebAssembly-based .NET runtime. WASI is bringing WASM out of the browser world by providing a system interface to run WebAssembly outside the web. It is a standard for how WASM modules interact with the host environment. This post will show you how to run .NET 7 on a Raspberry PI Zero 2 W using WASM and WASI.&lt;/p&gt;</summary>
    
    
    
    
    <category term="ASP.NET Core" scheme="https://laurentkempe.com/tags/ASP-NET-Core/"/>
    
    <category term="Raspberry Pi" scheme="https://laurentkempe.com/tags/Raspberry-Pi/"/>
    
    <category term="Wasm" scheme="https://laurentkempe.com/tags/Wasm/"/>
    
    <category term="Wasi" scheme="https://laurentkempe.com/tags/Wasi/"/>
    
  </entry>
  
  <entry>
    <title>Write Logseq plugins in WebAssembly using .NET and C#</title>
    <link href="https://laurentkempe.com/2022/10/12/write-logseq-plugins-in-webassembly-using-dotnet-and-csharp/"/>
    <id>https://laurentkempe.com/2022/10/12/write-logseq-plugins-in-webassembly-using-dotnet-and-csharp/</id>
    <published>2022-10-12T05:24:08.000Z</published>
    <updated>2022-11-14T12:44:18.100Z</updated>
    
    
    <summary type="html">&lt;p&gt;I am using a tool called logseq to manage my notes. It is a fantastic tool, and I would like to be able to extend it. I am not an expert web developer, but I am a .NET developer. I would like to be able to write plugins for logseq using .NET and C#. I have found a way to do it using WebAssembly. In this post, I am going to show you how to do it.&lt;/p&gt;</summary>
    
    
    
    
    <category term="WebAssembly" scheme="https://laurentkempe.com/tags/WebAssembly/"/>
    
    <category term=".NET" scheme="https://laurentkempe.com/tags/NET/"/>
    
    <category term="C#" scheme="https://laurentkempe.com/tags/C/"/>
    
    <category term="Wasm" scheme="https://laurentkempe.com/tags/Wasm/"/>
    
    <category term="Logseq" scheme="https://laurentkempe.com/tags/Logseq/"/>
    
  </entry>
  
  <entry>
    <title>Unit testing Async WPF ICommand</title>
    <link href="https://laurentkempe.com/2022/02/10/unit-testing-async-wpf-icommand/"/>
    <id>https://laurentkempe.com/2022/02/10/unit-testing-async-wpf-icommand/</id>
    <published>2022-02-10T19:37:38.000Z</published>
    <updated>2022-11-14T12:44:18.100Z</updated>
    
    
    <summary type="html">&lt;p&gt;In the past, within my team at &lt;a href=&quot;http://www.innoveo.com/&quot;&gt;Innoveo&lt;/a&gt;, we had several discussions about the best way to unit test async WPF ICommand. We value quality, so testing is essential to us. We decided to make the methods called by the command &lt;code&gt;internal&lt;/code&gt; so that our tests could call those.&lt;/p&gt;
&lt;p&gt;What is the problem with unit testing an Async WPF ICommand? The problem is that the command is an &lt;code&gt;async void&lt;/code&gt; method! So, you have no way to &lt;code&gt;await&lt;/code&gt; the end of the execution of your command. So, your test might assert on things that are still executing.&lt;/p&gt;</summary>
    
    
    
    
    <category term="WPF" scheme="https://laurentkempe.com/tags/WPF/"/>
    
    <category term=".NET" scheme="https://laurentkempe.com/tags/NET/"/>
    
    <category term="unit test" scheme="https://laurentkempe.com/tags/unit-test/"/>
    
    <category term="C#" scheme="https://laurentkempe.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Automate your .NET project builds with NUKE a cross-platform build automation solution</title>
    <link href="https://laurentkempe.com/2022/02/02/automate-your-dotnet-project-builds-with-nuke-a-cross-platform-build-automation-solution/"/>
    <id>https://laurentkempe.com/2022/02/02/automate-your-dotnet-project-builds-with-nuke-a-cross-platform-build-automation-solution/</id>
    <published>2022-02-02T20:26:31.000Z</published>
    <updated>2022-11-14T12:44:18.100Z</updated>
    
    
    <summary type="html">&lt;p&gt;Early in my journey in developing software, I used to start a project by setting first a way to build my software automatically each time I did a set of changes. Long, very long ago, I used scripts scheduled to run. When JetBrains shipped &lt;a href=&quot;https://www.jetbrains.com/teamcity/&quot;&gt;TeamCity&lt;/a&gt; I started to use it extensively for &lt;a href=&quot;https://laurentkempe.com/tags/NDepend/&quot;&gt;my projects&lt;/a&gt;, here is my first post about “&lt;a href=&quot;https://laurentkempe.com/2008/03/21/Set-Up-a-Build-Computer-using-VisualSVN-Team-City-MsTest-NUnit/&quot;&gt;Set Up a Build Computer using VisualSVN, Team City, MsTest, NUnit&lt;/a&gt;“ from March 21, 2008, but used it since version 1.0. Later on, I also used Azure Pipelines to build Git Diff Margin and also GitHub Actions, for example, to build and deploy those pages.&lt;/p&gt;</summary>
    
    
    
    
    <category term=".NET" scheme="https://laurentkempe.com/tags/NET/"/>
    
    <category term="C#" scheme="https://laurentkempe.com/tags/C/"/>
    
    <category term="Build" scheme="https://laurentkempe.com/tags/Build/"/>
    
    <category term="NUKE" scheme="https://laurentkempe.com/tags/NUKE/"/>
    
  </entry>
  
  <entry>
    <title>Dapr binding building block by simple example</title>
    <link href="https://laurentkempe.com/2021/10/19/dapr-binding-building-block-by-simple-example/"/>
    <id>https://laurentkempe.com/2021/10/19/dapr-binding-building-block-by-simple-example/</id>
    <published>2021-10-19T11:32:05.000Z</published>
    <updated>2022-11-14T12:44:18.100Z</updated>
    
    
    <summary type="html">&lt;p&gt;Till now, we have seen two &lt;a href=&quot;https://laurentkempe.com/tags/Dapr/&quot;&gt;Dapr building blocks&lt;/a&gt; which are the &lt;a href=&quot;https://docs.dapr.io/developing-applications/building-blocks/service-invocation/service-invocation-overview/&quot;&gt;service to service invocation building block&lt;/a&gt; and the &lt;a href=&quot;https://docs.dapr.io/developing-applications/building-blocks/secrets/secrets-overview/&quot;&gt;secrets building block&lt;/a&gt;. The secret building block serves to protect things like a database connection string, an API key… so that they’re never disclosed outside of the application. The service to service invocation building block serves to make calls between services in your distributed application easy. In this post, we will introduce a third one which is the &lt;a href=&quot;https://docs.dapr.io/developing-applications/building-blocks/bindings/bindings-overview/&quot;&gt;bindings building block&lt;/a&gt;. The bindings building block enables your distributed application to handle external events or invoke external services.&lt;/p&gt;</summary>
    
    
    
    
    <category term=".NET" scheme="https://laurentkempe.com/tags/NET/"/>
    
    <category term="Dapr" scheme="https://laurentkempe.com/tags/Dapr/"/>
    
  </entry>
  
  <entry>
    <title>Accessing Dapr secrets building block using Dapr .NET SDK</title>
    <link href="https://laurentkempe.com/2021/04/06/accessing-dapr-secrets-building-block-using-dapr-dotnet-sdk/"/>
    <id>https://laurentkempe.com/2021/04/06/accessing-dapr-secrets-building-block-using-dapr-dotnet-sdk/</id>
    <published>2021-04-06T14:49:45.000Z</published>
    <updated>2022-11-14T12:44:18.100Z</updated>
    
    
    <summary type="html">&lt;p&gt;In all &lt;a href=&quot;https://laurentkempe.com/tags/Dapr/&quot;&gt;previous posts&lt;/a&gt;, we were looking at the Dapr service invocation building block. We have seen how to expose and call HTTP and gRPC services using it. In this post, we will see how Dapr ease developers life when it comes to deal with secrets, thanks to the secrets management building block.&lt;/p&gt;</summary>
    
    
    
    
    <category term=".NET" scheme="https://laurentkempe.com/tags/NET/"/>
    
    <category term="Dapr" scheme="https://laurentkempe.com/tags/Dapr/"/>
    
  </entry>
  
  <entry>
    <title>Calling Dapr service with gRPC</title>
    <link href="https://laurentkempe.com/2021/03/25/calling-dapr-service-with-grpc/"/>
    <id>https://laurentkempe.com/2021/03/25/calling-dapr-service-with-grpc/</id>
    <published>2021-03-25T17:07:50.000Z</published>
    <updated>2022-11-14T12:44:18.100Z</updated>
    
    
    <summary type="html">&lt;p&gt;In previous posts, we focused on Dapr service invocation using the HTTP protocol. Dapr, through its service invocation, can also reliably and securely communicate with other applications using gRPC. We will have a look at this other capability in this post.&lt;/p&gt;</summary>
    
    
    
    
    <category term=".NET" scheme="https://laurentkempe.com/tags/NET/"/>
    
    <category term="Dapr" scheme="https://laurentkempe.com/tags/Dapr/"/>
    
    <category term="gRPC" scheme="https://laurentkempe.com/tags/gRPC/"/>
    
  </entry>
  
  <entry>
    <title>Service to service invocation with Refit and Dapr .NET SDK</title>
    <link href="https://laurentkempe.com/2021/03/18/service-to-service-invocation-with-refit-and-dapr-dotnet-sdk/"/>
    <id>https://laurentkempe.com/2021/03/18/service-to-service-invocation-with-refit-and-dapr-dotnet-sdk/</id>
    <published>2021-03-18T15:20:00.000Z</published>
    <updated>2022-11-14T12:44:18.100Z</updated>
    
    
    <summary type="html">&lt;p&gt;In the last post, we have seen how to &lt;a href=&quot;https://laurentkempe.com/2021/03/16/service-to-service-invocation-with-dapr-dotnet-sdk/&quot;&gt;call a service from another service using the Dapr .NET SDK&lt;/a&gt;. In this one, we will have a look at a possible way to simplify the development of the client code using &lt;a href=&quot;https://reactiveui.github.io/refit/&quot;&gt;Refit&lt;/a&gt;, the automatic type-safe REST library for .NET Core, Xamarin, and .NET.&lt;/p&gt;</summary>
    
    
    
    
    <category term="ASP.NET Core" scheme="https://laurentkempe.com/tags/ASP-NET-Core/"/>
    
    <category term=".NET" scheme="https://laurentkempe.com/tags/NET/"/>
    
    <category term="Dapr" scheme="https://laurentkempe.com/tags/Dapr/"/>
    
  </entry>
  
  <entry>
    <title>Service to service invocation with Dapr .NET SDK</title>
    <link href="https://laurentkempe.com/2021/03/16/service-to-service-invocation-with-dapr-dotnet-sdk/"/>
    <id>https://laurentkempe.com/2021/03/16/service-to-service-invocation-with-dapr-dotnet-sdk/</id>
    <published>2021-03-16T16:00:39.000Z</published>
    <updated>2022-11-14T12:44:18.100Z</updated>
    
    
    <summary type="html">&lt;p&gt;In the previous two posts, we tackled the way to start with Dapr and how to call services. In this one, we will see how we can leverage the Dapr .NET SDK to handle service to service calls.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://laurentkempe.com/2021/03/09/getting-started-with-dapr-for-dotnet-developers/&quot;&gt;Getting started with Dapr for .NET Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://laurentkempe.com/2021/03/11/using-service-invocation-from-dapr-dotnet-sdk/&quot;&gt;Using Service Invocation from Dapr .NET SDK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="ASP.NET Core" scheme="https://laurentkempe.com/tags/ASP-NET-Core/"/>
    
    <category term=".NET" scheme="https://laurentkempe.com/tags/NET/"/>
    
    <category term="Dapr" scheme="https://laurentkempe.com/tags/Dapr/"/>
    
  </entry>
  
  <entry>
    <title>Using Service Invocation from Dapr .NET SDK</title>
    <link href="https://laurentkempe.com/2021/03/11/using-service-invocation-from-dapr-dotnet-sdk/"/>
    <id>https://laurentkempe.com/2021/03/11/using-service-invocation-from-dapr-dotnet-sdk/</id>
    <published>2021-03-11T15:51:49.000Z</published>
    <updated>2022-11-14T12:44:18.100Z</updated>
    
    
    <summary type="html">&lt;p&gt;In the previous post “&lt;a href=&quot;https://laurentkempe.com/2021/03/09/getting-started-with-dapr-for-dotnet-developers/&quot;&gt;Getting started with Dapr for .NET Developers&lt;/a&gt;“ we have seen how easy it was to expose a web API written in .NET and the power of exposing it through Dapr sidecar. In this post, we are looking at the different possible ways to invoke that service.&lt;/p&gt;</summary>
    
    
    
    
    <category term=".NET" scheme="https://laurentkempe.com/tags/NET/"/>
    
    <category term="Dapr" scheme="https://laurentkempe.com/tags/Dapr/"/>
    
  </entry>
  
  <entry>
    <title>Getting started with Dapr for .NET Developers</title>
    <link href="https://laurentkempe.com/2021/03/09/getting-started-with-dapr-for-dotnet-developers/"/>
    <id>https://laurentkempe.com/2021/03/09/getting-started-with-dapr-for-dotnet-developers/</id>
    <published>2021-03-09T15:53:56.000Z</published>
    <updated>2022-11-14T12:44:18.100Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/architecture/dapr-for-net-developers/&quot;&gt;Dapr for .NET Developers&lt;/a&gt; is a great book, read in a weekend, to start gaining an understanding of what &lt;a href=&quot;https://dapr.io/&quot;&gt;Dapr&lt;/a&gt; is and especially for .NET Developers. In this post, we will see how you can use .NET to create a service and run it with Dapr and what does this provides.&lt;/p&gt;</summary>
    
    
    
    
    <category term=".NET" scheme="https://laurentkempe.com/tags/NET/"/>
    
    <category term="Dapr" scheme="https://laurentkempe.com/tags/Dapr/"/>
    
  </entry>
  
  <entry>
    <title>Automate developer work using Git Aliases</title>
    <link href="https://laurentkempe.com/2020/02/28/Automate-developer-work-using-Git-Aliases/"/>
    <id>https://laurentkempe.com/2020/02/28/Automate-developer-work-using-Git-Aliases/</id>
    <published>2020-02-28T15:26:27.000Z</published>
    <updated>2022-11-14T12:44:18.080Z</updated>
    
    
    <summary type="html">&lt;p&gt;I am using Git for many, many years. I am a big fan of it. How could that be different when you had to use versioning systems like CVS, SVN… I even took influence so that the whole company I work for migrates to it.&lt;/p&gt;
&lt;p&gt;Over the years, I have used different Git clients, tried to work only from my IDE without much liking it.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Git" scheme="https://laurentkempe.com/tags/Git/"/>
    
    <category term="PowerShell" scheme="https://laurentkempe.com/tags/PowerShell/"/>
    
    <category term="Windows" scheme="https://laurentkempe.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>gRPC and C# 8 Async stream cancellation</title>
    <link href="https://laurentkempe.com/2019/09/25/gRPC-and-csharp-8-Async-stream-cancellation/"/>
    <id>https://laurentkempe.com/2019/09/25/gRPC-and-csharp-8-Async-stream-cancellation/</id>
    <published>2019-09-25T20:06:12.000Z</published>
    <updated>2022-11-14T12:44:18.100Z</updated>
    
    
    <summary type="html">&lt;p&gt;In the previous post “&lt;a href=&quot;https://laurentkempe.com/2019/09/18/gRPC-and-csharp-8-Async-stream/&quot;&gt;gRPC and C# 8 Async stream&lt;/a&gt;“, we looked at how gRPC server stream and C# 8 Async stream work great together. In this post, we are looking at the way we can, from the client, stop the server to stream results back.&lt;/p&gt;</summary>
    
    
    
    
    <category term="ASP.NET Core" scheme="https://laurentkempe.com/tags/ASP-NET-Core/"/>
    
    <category term="C#" scheme="https://laurentkempe.com/tags/C/"/>
    
    <category term="gRPC" scheme="https://laurentkempe.com/tags/gRPC/"/>
    
  </entry>
  
  <entry>
    <title>gRPC and C# 8 Async stream</title>
    <link href="https://laurentkempe.com/2019/09/18/gRPC-and-csharp-8-Async-stream/"/>
    <id>https://laurentkempe.com/2019/09/18/gRPC-and-csharp-8-Async-stream/</id>
    <published>2019-09-18T17:23:00.000Z</published>
    <updated>2022-11-14T12:44:18.100Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://grpc.io/&quot;&gt;gRPC&lt;/a&gt; and its idea to describe an API in a standardized file, which can generate both client and server code to interact in different languages is a compelling idea.&lt;br&gt;In this post, I would like to have a quick look at the experience you would have with gRPC streaming capability and the new &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-8.0/async-streams&quot;&gt;C# 8 async streams&lt;/a&gt;, which sounds like a perfect match.&lt;/p&gt;</summary>
    
    
    
    
    <category term="ASP.NET Core" scheme="https://laurentkempe.com/tags/ASP-NET-Core/"/>
    
    <category term="C#" scheme="https://laurentkempe.com/tags/C/"/>
    
    <category term="gRPC" scheme="https://laurentkempe.com/tags/gRPC/"/>
    
  </entry>
  
  <entry>
    <title>WPF and .NET Generic Host with .NET Core 3.0</title>
    <link href="https://laurentkempe.com/2019/09/03/WPF-and-dotnet-Generic-Host-with-dotnet-Core-3-0/"/>
    <id>https://laurentkempe.com/2019/09/03/WPF-and-dotnet-Generic-Host-with-dotnet-Core-3-0/</id>
    <published>2019-09-03T20:21:08.000Z</published>
    <updated>2022-11-14T12:44:18.096Z</updated>
    
    
    <summary type="html">&lt;p&gt;I like very much the idea of a &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/generic-host?view=aspnetcore-3.0&quot;&gt;.NET Generic Host in the MSDN documentation&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An object that encapsulates an app’s resources, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dependency injection (DI)&lt;/li&gt;
&lt;li&gt;Logging&lt;/li&gt;
&lt;li&gt;Configuration&lt;/li&gt;
&lt;li&gt;IHostedService implementations&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="WPF" scheme="https://laurentkempe.com/tags/WPF/"/>
    
    <category term=".NET Core" scheme="https://laurentkempe.com/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title>WPF and IOC on .NET Core 3.0</title>
    <link href="https://laurentkempe.com/2019/04/18/WPF-and-IOC-on-NET-Core-3-0/"/>
    <id>https://laurentkempe.com/2019/04/18/WPF-and-IOC-on-NET-Core-3-0/</id>
    <published>2019-04-18T08:57:56.000Z</published>
    <updated>2022-11-14T12:44:18.096Z</updated>
    
    
    <summary type="html">&lt;p&gt;At work, we are planning to migrate our WPF application from .NET Framework 4.7 to &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/core/whats-new/dotnet-core-3-0&quot;&gt;.NET Core 3.0&lt;/a&gt;. The main reason for doing so is that it was always a big pain to organize the updates of the .NET Framework on our customer machines. So being able to bundle .NET Core with our application is a big plus for us. Then, for sure, we are looking for the performance improvements brought by .NET Core and finally the new capabilities brought by the fast pace of innovation of .NET Core.&lt;/p&gt;</summary>
    
    
    
    
    <category term="WPF" scheme="https://laurentkempe.com/tags/WPF/"/>
    
    <category term=".NET Core" scheme="https://laurentkempe.com/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title>Azure DevOps for Visual Studio Extensions</title>
    <link href="https://laurentkempe.com/2019/03/05/Azure-DevOps-for-Visual-Studio-Extensions/"/>
    <id>https://laurentkempe.com/2019/03/05/Azure-DevOps-for-Visual-Studio-Extensions/</id>
    <published>2019-03-05T21:14:42.000Z</published>
    <updated>2022-11-14T12:44:18.080Z</updated>
    
    
    <summary type="html">&lt;p&gt;As you might have guessed reading some of my older posts, I like to automate things which I believe a computer should do in place of humans.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Visual Studio" scheme="https://laurentkempe.com/tags/Visual-Studio/"/>
    
    <category term="Azure DevOps" scheme="https://laurentkempe.com/tags/Azure-DevOps/"/>
    
    <category term="Chocolatey" scheme="https://laurentkempe.com/tags/Chocolatey/"/>
    
    <category term="Github" scheme="https://laurentkempe.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Dynamically compile and run code using .NET Core 3.0</title>
    <link href="https://laurentkempe.com/2019/02/18/dynamically-compile-and-run-code-using-dotNET-Core-3.0/"/>
    <id>https://laurentkempe.com/2019/02/18/dynamically-compile-and-run-code-using-dotNET-Core-3.0/</id>
    <published>2019-02-18T19:30:12.000Z</published>
    <updated>2022-11-14T12:44:18.080Z</updated>
    
    
    <summary type="html">&lt;p&gt;Let’ see in this blog post the new possibility offered by &lt;strong&gt;.NET Core 3.0 preview 2&lt;/strong&gt; to load and unload assemblies at run time using &lt;strong&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Runtime/Loader/AssemblyLoadContext.cs#L14&quot;&gt;AssemblyLoadContext&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;</summary>
    
    
    
    
    <category term=".NET Core" scheme="https://laurentkempe.com/tags/NET-Core/"/>
    
    <category term="Roslyn" scheme="https://laurentkempe.com/tags/Roslyn/"/>
    
  </entry>
  
</feed>
