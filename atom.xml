<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Laurent Kempé</title>
  
  <subtitle>One of the Tech Head Brothers</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://laurentkempe.com/"/>
  <updated>2019-09-03T20:25:02.120Z</updated>
  <id>https://laurentkempe.com/</id>
  
  <author>
    <name>Laurent Kempé</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WPF and .NET Generic Host with .NET Core 3.0</title>
    <link href="https://laurentkempe.com/2019/09/03/WPF-and-dotnet-Generic-Host-with-dotnet-Core-3-0/"/>
    <id>https://laurentkempe.com/2019/09/03/WPF-and-dotnet-Generic-Host-with-dotnet-Core-3-0/</id>
    <published>2019-09-03T20:21:08.000Z</published>
    <updated>2019-09-03T20:25:02.120Z</updated>
    
    <content type="html"><![CDATA[<p>I like very much the idea of a <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/generic-host?view=aspnetcore-3.0" target="_blank" rel="noopener">.NET Generic Host in the MSDN documentation</a>:</p><blockquote><p>An object that encapsulates an app’s resources, such as:</p><ul><li>Dependency injection (DI)</li><li>Logging</li><li>Configuration</li><li>IHostedService implementations<a id="more"></a></li></ul></blockquote><p>The origin of .NET Generic Host is <a href="https://github.com/aspnet/Extensions" target="_blank" rel="noopener">Microsoft.Extensions</a>, a set of .NET APIs for commonly used programming patterns and utilities, such as dependency injection, logging, and application configuration.</p><p>Why do I like this idea? Because it means that whatever application you are building using .NET Generic Host, it will always bring all of those services freely in a consistent manner. The application can be an ASP.NET Core application, which is where the idea of Web Host emerged and was refined into a Generic Host.</p><p>But, <strong>why couldn’t a WPF application be build using it?</strong> The current WPF template doesn’t use .NET Generic Host! Never the less, let’s modify the code generated by the WPF template to leverage it.</p><p>The goal is to have a tiny .NET Core 3.0 WPF application demonstrating each of Dependency injection (DI), Logging and Configuration.</p><h1 id="Default-WPF-template"><a href="#Default-WPF-template" class="headerlink" title="Default WPF template"></a>Default WPF template</h1><p>We need to modify the App.xaml so that it doesn’t use StartupUri. Which sets the UI; MainWindow.xaml, that is automatically shown when an application starts. Our goal is to be able to create the Window ourself, using the IOC container, so that we can inject services!</p><p>We replace <em>StartupUri</em> by <em>Startup</em> calling <em>Application_Startup</em> and when we are at it, we also add <em>Exit</em> and <em>Application_Exit</em>. This will let us know when the application starts/stops so that we can start/stop the host.</p><figure class="highlight csharp"><figcaption><span>App.xaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Application x:Class=<span class="string">"wpfGenericHost.App"</span></span><br><span class="line">             xmlns=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span></span><br><span class="line">             xmlns:x=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml"</span></span><br><span class="line">             xmlns:local=<span class="string">"clr-namespace:wpfGenericHost"</span></span><br><span class="line">             Startup=<span class="string">"Application_Startup"</span></span><br><span class="line">             Exit=<span class="string">"Application_Exit"</span>&gt;</span><br><span class="line">    &lt;Application.Resources /&gt;         </span><br><span class="line">&lt;/Application&gt;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><figcaption><span>App.xaml.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">App</span> : <span class="title">Application</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">App</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Application_Startup</span>(<span class="params"><span class="keyword">object</span> sender, StartupEventArgs e</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Application_Exit</span>(<span class="params"><span class="keyword">object</span> sender, ExitEventArgs e</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The App constructor seems to be the right place to build our new Host. <em>Application_Startup</em> the place to start the host and <em>Application_Exit</em> the place to stop the host.</p><figure class="highlight csharp"><figcaption><span>App.xaml.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">App</span> : <span class="title">Application</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> IHost _host;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">App</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _host = <span class="keyword">new</span> HostBuilder().Build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">Application_Startup</span>(<span class="params"><span class="keyword">object</span> sender, StartupEventArgs e</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">await</span> _host.StartAsync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">Application_Exit</span>(<span class="params"><span class="keyword">object</span> sender, ExitEventArgs e</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">using</span> (_host)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">await</span> _host.StopAsync(TimeSpan.FromSeconds(<span class="number">5</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Dependency-injection-DI"><a href="#Dependency-injection-DI" class="headerlink" title="Dependency injection (DI)"></a>Dependency injection (DI)</h1><p>A first capability that .NET Generic Host is bringing is Dependency injection. We can inject some dependencies to the <em>MainWindow</em> as we delegate it’s creation to the IOC container in <em>Application_Startup</em>. In this example, we are injecting a simple interface called <em>ITextService</em> with one method <em>GetText()</em>.</p><div class="alert info"><p>In a real application, we definitely would be able to inject a View Model like <em>MainWindowViewModel</em> which would itself have other dependencies provided by the IOC container.</p></div><figure class="highlight csharp"><figcaption><span>MainWindow.xaml.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainWindow</span> : <span class="title">Window</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>(<span class="params">ITextService textService</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        InitializeComponent();</span><br><span class="line"></span><br><span class="line">        Label.Content = textService.GetText();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><figcaption><span>App.xaml.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">App</span> : <span class="title">Application</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> IHost _host;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">App</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _host = <span class="keyword">new</span> HostBuilder()</span><br><span class="line">                    .ConfigureServices((context, services) =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        services.AddSingleton&lt;ITextService, TextService&gt;();</span><br><span class="line">                        services.AddSingleton&lt;MainWindow&gt;();</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .Build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">Application_Startup</span>(<span class="params"><span class="keyword">object</span> sender, StartupEventArgs e</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">await</span> _host.StartAsync();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> mainWindow = _host.Services.GetService&lt;MainWindow&gt;();</span><br><span class="line">        mainWindow.Show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h1><p>The second capability of .NET Generic Host we want to explore is Configuration. We want to build the concrete implementation of <em>ITextService</em> with a dependency on an external configuration to get the text to display in the main window.</p><p>The configuration is handled by a concrete class called <em>Settings</em> and the <em>appsettings.json</em> configuration file. Both have a property called <em>Text</em>.</p><figure class="highlight csharp"><figcaption><span>Settings.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Settings</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Text &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>appsettings.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"Text"</span>: <span class="string">"Hello WPF .NET Core 3.0\nfrom .NET Generic Host!"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><figcaption><span>TextService.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">TextService</span> : <span class="title">ITextService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> _text;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TextService</span>(<span class="params">IOptions&lt;Settings&gt; options</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _text = options.Value.Text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetText</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We register the <em>Settings</em> class in the IOC container so that it is resolved and injected as <em>IOptions<settings></settings></em> in our concrete class <em>TextService</em>.</p><figure class="highlight csharp"><figcaption><span>App.xaml.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">App</span> : <span class="title">Application</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> IHost _host;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Settings _settings;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">App</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _host = <span class="keyword">new</span> HostBuilder()</span><br><span class="line">                    .ConfigureAppConfiguration((context, configurationBuilder) =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        configurationBuilder.SetBasePath(context.HostingEnvironment.ContentRootPath);</span><br><span class="line">                        configurationBuilder.AddJsonFile(<span class="string">"appsettings.json"</span>, optional: <span class="literal">false</span>);</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .ConfigureServices((context, services) =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        services.Configure&lt;Settings&gt;(context.Configuration);</span><br><span class="line"></span><br><span class="line">                        services.AddSingleton&lt;ITextService, TextService&gt;();</span><br><span class="line">                        services.AddSingleton&lt;MainWindow&gt;();</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .Build();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h1><p>The final capability of .NET Generic Host we want to have a look at is Logging. In our simple example, we will just add the possibility to output logs to the Console. Again, we are injecting an <em>ILogger</em> into our concrete class <em>TextService</em> to be able to write a piece of information to our logs.</p><figure class="highlight csharp"><figcaption><span>TextService.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">TextService</span> : <span class="title">ITextService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> _text;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TextService</span>(<span class="params">IOptions&lt;Settings&gt; options, ILogger&lt;TextService&gt; logger</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _text = options.Value.Text;</span><br><span class="line"></span><br><span class="line">        logger.LogInformation(<span class="string">$"Text read from settings: '<span class="subst">&#123;options.Value.Text&#125;</span>'"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetText</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><figcaption><span>App.xaml.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">App</span> : <span class="title">Application</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> IHost _host;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">App</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _host = <span class="keyword">new</span> HostBuilder()</span><br><span class="line">                    .ConfigureAppConfiguration((context, configurationBuilder) =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        configurationBuilder.SetBasePath(context.HostingEnvironment.ContentRootPath);</span><br><span class="line">                        configurationBuilder.AddJsonFile(<span class="string">"appsettings.json"</span>, optional: <span class="literal">false</span>);</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .ConfigureServices((context, services) =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        services.Configure&lt;Settings&gt;(context.Configuration);</span><br><span class="line"></span><br><span class="line">                        services.AddSingleton&lt;ITextService, TextService&gt;();</span><br><span class="line">                        services.AddSingleton&lt;MainWindow&gt;();</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .ConfigureLogging(logging =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        logging.AddConsole();</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .Build();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h1><p>We can run the application and see that <em>MainWindow</em> is created using the <em>TextService</em> which read the <em>Text</em> property of <em>appsettings.json</em> and our WPF application correctly displays the text.</p><p><img src="https://live.staticflickr.com/65535/48673324906_115675602b_o.png&quot;" alt="WPF and .NET Generic Host with .NET Core 3.0"></p><p>And the output in the log</p><p><img src="https://live.staticflickr.com/65535/48673362031_ab8e1f486b_o.png" alt></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>We have seen all the benefits the .NET Generic Host is bringing. It was easy to integrate into WPF applications, even if Microsoft is not currently providing a .NET Core template for that particular usage. But it seems that the idea is open to discussion, you can read more about it on Github issue “<a href="https://github.com/dotnet/wpf/issues/499" target="_blank" rel="noopener">Make Future WPF IoC Friendly #499</a>“.</p><p>You can get all the code on GitHub </p><div style="text-align: left">  <div class="github-card" data-user="laurentkempe" data-repo="WpfGenericHost" data-height="200" data-width="400" data-theme="default" data-target data-client-id data-client-secret></div></div><script src="/github-card-lib/githubcard.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I like very much the idea of a &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/generic-host?view=aspnetcore-3.0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;.NET Generic Host in the MSDN documentation&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An object that encapsulates an app’s resources, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dependency injection (DI)&lt;/li&gt;
&lt;li&gt;Logging&lt;/li&gt;
&lt;li&gt;Configuration&lt;/li&gt;
&lt;li&gt;IHostedService implementations
    
    </summary>
    
    
      <category term=".NET Core" scheme="https://laurentkempe.com/tags/NET-Core/"/>
    
      <category term="WPF" scheme="https://laurentkempe.com/tags/WPF/"/>
    
  </entry>
  
  <entry>
    <title>WPF and IOC on .NET Core 3.0</title>
    <link href="https://laurentkempe.com/2019/04/18/WPF-and-IOC-on-NET-Core-3-0/"/>
    <id>https://laurentkempe.com/2019/04/18/WPF-and-IOC-on-NET-Core-3-0/</id>
    <published>2019-04-18T08:57:56.000Z</published>
    <updated>2019-09-03T19:42:10.583Z</updated>
    
    <content type="html"><![CDATA[<p>At work, we are planning to migrate our WPF application from .NET Framework 4.7 to <a href="https://docs.microsoft.com/en-us/dotnet/core/whats-new/dotnet-core-3-0" target="_blank" rel="noopener">.NET Core 3.0</a>. The main reason for doing so is that it was always a big pain to organize the updates of the .NET Framework on our customer machines. So being able to bundle .NET Core with our application is a big plus for us. Then, for sure, we are looking for the performance improvements brought by .NET Core and finally the new capabilities brought by the fast pace of innovation of .NET Core.<br><a id="more"></a><br>This is a great opportunity for us to see and renew a part of the libraries we depend on.  </p><p>In the current version of our application, we are using <a href="https://github.com/structuremap/structuremap" target="_blank" rel="noopener">StructureMap</a> as our <a href="https://en.wikipedia.org/wiki/Inversion_of_control" target="_blank" rel="noopener">IOC container</a>. As you might have read <a href="https://jeremydmiller.com/2018/01/29/sunsetting-structuremap/" target="_blank" rel="noopener">StructureMap has been sunsetted</a> and replaced by <a href="https://jasperfx.github.io/lamar/" target="_blank" rel="noopener">Lamar</a>.</p><p>We could have gone to Lamar as it maintains API compatibility with SturtureMap. I just did not want to bring the dependency to Roslyn, but it seems that it was changed in <a href="https://jeremydmiller.com/2019/03/29/lamar-v3-is-released-faster-smaller-quicker-cold-starts-internal-type-friendly/" target="_blank" rel="noopener">Lamar 3.0</a>. So, we surely will consider it.</p><p>As a first try, I would like to have a look at the IOC container brought by the ASP.NET team; <a href="https://www.nuget.org/packages/Microsoft.Extensions.DependencyInjection/3.0.0-preview4.19216.2" target="_blank" rel="noopener">Microsoft Extensions DependencyInjection</a>. Even if it was brought by the ASP.NET team it doesn’t mean at all that it cannot be used outside of ASP.NET!<br>It is marked as Fast by <a href="https://twitter.com/danielpalme" target="_blank" rel="noopener">Daniel Palme</a> in his post ‘<a href="http://www.palmmedia.de/blog/2011/8/30/ioc-container-benchmark-performance-comparison" target="_blank" rel="noopener">IoC Container Benchmark - Performance comparison</a>‘, so it is a good candidate.</p><p>The goal of this post is to see how we could use Microsoft Extensions DependencyInjection in a .NET Core 3.0 with WPF. We will start really easily by creating a new WPF application with the .NET Core CLI.</p><h1 id="Project-creation"><a href="#Project-creation" class="headerlink" title="Project creation"></a>Project creation</h1><p>We create our project from the command line.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">❯ mkdir WpfIoc</span><br><span class="line">❯ cd WpfIoc</span><br><span class="line">❯ dotnet.exe --version</span><br><span class="line">3.0.100-preview4-011223</span><br><span class="line"></span><br><span class="line">❯ dotnet new wpf</span><br><span class="line">The template "WPF Application" was created successfully.</span><br><span class="line"></span><br><span class="line">Processing post-creation actions...</span><br><span class="line">Running 'dotnet restore' on C:\Users\laure\projects\WpfIoc\WpfIoc.csproj...</span><br><span class="line">  Restore completed in 90.03 ms for C:\Users\laure\projects\WpfIoc\WpfIoc.csproj.</span><br><span class="line"></span><br><span class="line">Restore succeeded.</span><br><span class="line"></span><br><span class="line">❯ dotnet build</span><br><span class="line">Microsoft (R) Build Engine version 16.1.54-preview+gd004974104 for .NET Core</span><br><span class="line">Copyright (C) Microsoft Corporation. All rights reserved.</span><br><span class="line"></span><br><span class="line">  Restore completed in 19.92 ms for C:\Users\laure\projects\WpfIoc\WpfIoc.csproj.</span><br><span class="line">C:\Program Files\dotnet\sdk\3.0.100-preview4-011223\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.RuntimeIdentifierInference.targets(151,5): message NETSDK1057: You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview [C:\Users\laure\projects\WpfIoc\WpfIoc.csproj]</span><br><span class="line">  WpfIoc -&gt; C:\Users\laure\projects\WpfIoc\bin\Debug\netcoreapp3.0\WpfIoc.dll</span><br><span class="line"></span><br><span class="line">Build succeeded.</span><br><span class="line">    0 Warning(s)</span><br><span class="line">    0 Error(s)</span><br><span class="line"></span><br><span class="line">Time Elapsed 00:00:01.63</span><br></pre></td></tr></table></figure><p>What we want to achieve is to bootstrap the application and inject in the constructor of our MainWindow a service which will be called to display some text on the main window of the application.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><p>First, we need to add the reference to the <em>Microsoft Extensions DependencyInjection</em>.</p><figure class="highlight xml"><figcaption><span>WpfIoc.csproj</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">"Microsoft.NET.Sdk.WindowsDesktop"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">OutputType</span>&gt;</span>WinExe<span class="tag">&lt;/<span class="name">OutputType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TargetFramework</span>&gt;</span>netcoreapp3.0<span class="tag">&lt;/<span class="name">TargetFramework</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">UseWPF</span>&gt;</span>true<span class="tag">&lt;/<span class="name">UseWPF</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"Microsoft.Extensions.DependencyInjection"</span> <span class="attr">Version</span>=<span class="string">"3.0.0-preview4.19216.2"</span> /&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Then we create an interface <em>ITextService</em> which will be injected by the container into the MainWindow class.</p><figure class="highlight csharp"><figcaption><span>ITextService.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ITextService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">string</span> <span class="title">GetText</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> In fact, it is a concrete implementation of that interface which will be injected <em>TextService</em>.</p><figure class="highlight csharp"><figcaption><span>TextService.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">TextService</span> : <span class="title">ITextService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> _text;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TextService</span>(<span class="params"><span class="keyword">string</span> text</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _text = text;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetText</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then we need to configure our IOC container.</p><figure class="highlight csharp"><figcaption><span>App.xaml.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.AddSingleton&lt;ITextService&gt;(provider =&gt; <span class="keyword">new</span> TextService(<span class="string">"Hi WPF .NET Core 3.0!"</span>));</span><br></pre></td></tr></table></figure><p>So this also means that we need to have our IOC container creating our WPF MainWindow, no problem it is just another normal C# class.</p><figure class="highlight csharp"><figcaption><span>App.xaml.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.AddSingleton&lt;MainWindow&gt;();</span><br></pre></td></tr></table></figure><p>Next piece which we need to put in place is the one linking all the other pieces together; the IOC container! That’s quite easy we just need to extend the App class to create <em>ServiceCollection</em> add the dependencies we want the IOC container to manage and then to call <em>BuildServiceProvider</em>.  </p><figure class="highlight csharp"><figcaption><span>App.xaml.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">App</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> serviceCollection = <span class="keyword">new</span> ServiceCollection();</span><br><span class="line">    ConfigureServices(serviceCollection);</span><br><span class="line"></span><br><span class="line">    _serviceProvider = serviceCollection.BuildServiceProvider();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    services.AddSingleton&lt;ITextService&gt;(provider =&gt; <span class="keyword">new</span> TextService(<span class="string">"Hi WPF .NET Core 3.0!"</span>));</span><br><span class="line">    services.AddSingleton&lt;MainWindow&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then, on the <em>App_OnStartup</em> we are using the ServiceProvider to get an instance of <em>MainWindow</em> which would get the <em>ITextService</em> injected in its constructor.  </p><figure class="highlight csharp"><figcaption><span>App.xaml.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">App_OnStartup</span>(<span class="params"><span class="keyword">object</span> sender, StartupEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> mainWindow = _serviceProvider.GetService&lt;MainWindow&gt;();</span><br><span class="line">    mainWindow.Show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We also modified <em>App.xaml</em> to call <em>App_OnStartup</em>.</p><figure class="highlight xml"><figcaption><span>App.xaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Application</span> <span class="attr">x:Class</span>=<span class="string">"wpfioc.App"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns</span>=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:x</span>=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:local</span>=<span class="string">"clr-namespace:wpfioc"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Startup</span>=<span class="string">"App_OnStartup"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Application.Resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Application.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Application</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Finally, we modify the XAML of the MainWindow to display some text in a Label.</p><figure class="highlight xml"><figcaption><span>MainWindow.xaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">x:Class</span>=<span class="string">"WpfIoc.MainWindow"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:x</span>=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:d</span>=<span class="string">"http://schemas.microsoft.com/expression/blend/2008"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:mc</span>=<span class="string">"http://schemas.openxmlformats.org/markup-compatibility/2006"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:local</span>=<span class="string">"clr-namespace:WpfIoc"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">mc:Ignorable</span>=<span class="string">"d"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Title</span>=<span class="string">"MainWindow"</span> <span class="attr">Height</span>=<span class="string">"450"</span> <span class="attr">Width</span>=<span class="string">"800"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">"9*"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">"1*"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Label</span> <span class="attr">Name</span>=<span class="string">"Label"</span> <span class="attr">Content</span>=<span class="string">"Hello .NET Core!"</span> <span class="attr">HorizontalAlignment</span>=<span class="string">"Center"</span> <span class="attr">VerticalAlignment</span>=<span class="string">"Center"</span> <span class="attr">FontSize</span>=<span class="string">"40"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br></pre></td></tr></table></figure><p>And we inject through the constructor, the <em>ITextService</em> interface which is used to set the Label text.</p><figure class="highlight csharp"><figcaption><span>MainWindow.xaml.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainWindow</span> : <span class="title">Window</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>(<span class="params">ITextService textService</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        InitializeComponent();</span><br><span class="line"></span><br><span class="line">        Label.Content = textService.GetText();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h1><p>We can run the application and see that <em>TextService</em> is called and the WPF application correctly displays the text.</p><p><img src="https://live.staticflickr.com/65535/40675205763_ab0cd3c28b_o.png&quot;" alt="WPF IOC"></p><p>You can get all the code on GitHub<br><div style="text-align: left">  <div class="github-card" data-user="laurentkempe" data-repo="WpfIoc" data-height="200" data-width="400" data-theme="default" data-target data-client-id data-client-secret></div></div><script src="/github-card-lib/githubcard.js"></script></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;At work, we are planning to migrate our WPF application from .NET Framework 4.7 to &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/core/whats-new/dotnet-core-3-0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;.NET Core 3.0&lt;/a&gt;. The main reason for doing so is that it was always a big pain to organize the updates of the .NET Framework on our customer machines. So being able to bundle .NET Core with our application is a big plus for us. Then, for sure, we are looking for the performance improvements brought by .NET Core and finally the new capabilities brought by the fast pace of innovation of .NET Core.&lt;br&gt;
    
    </summary>
    
    
      <category term=".NET Core" scheme="https://laurentkempe.com/tags/NET-Core/"/>
    
      <category term="WPF" scheme="https://laurentkempe.com/tags/WPF/"/>
    
  </entry>
  
  <entry>
    <title>Azure DevOps for Visual Studio Extensions</title>
    <link href="https://laurentkempe.com/2019/03/05/Azure-DevOps-for-Visual-Studio-Extensions/"/>
    <id>https://laurentkempe.com/2019/03/05/Azure-DevOps-for-Visual-Studio-Extensions/</id>
    <published>2019-03-05T21:14:42.000Z</published>
    <updated>2019-03-05T21:19:42.479Z</updated>
    
    <content type="html"><![CDATA[<p>As you might have guessed reading some of my older posts, I like to automate things which I believe a computer should do in place of humans.</p><a id="more"></a><p>It is true for “<a href="https://laurentkempe.com/2018/06/01/Automating-development-machine-installation/">Automating my development machine installation</a>“ or deploying software in “<a href="https://laurentkempe.com/2016/07/18/Build-ship-and-run-ASP-NET-Core-on-Microsoft-Azure-using-Docker-Cloud/">Build, ship and run ASP.NET Core on Microsoft Azure using Docker Cloud</a>“… Today I will show you how to publish Visual Studio extensions using <a href="https://azure.microsoft.com/en-us/services/devops/" target="_blank" rel="noopener">Azure DevOps</a>.</p><p>I am the author of <strong><a href="https://marketplace.visualstudio.com/items?itemName=LaurentKempe.GitDiffMargin" target="_blank" rel="noopener">Git Diff Margin</a></strong>, a Visual Studio extension displaying live Git changes of the currently edited file on Visual Studio margin and scroll bar. It supports Visual Studio 2012 through Visual Studio 2019 Preview. You can <a href="#Git-Diff-Margin-feature-demo">watch a short video</a> about some of its features at the end of this blog post.</p><h1 id="Previously"><a href="#Previously" class="headerlink" title="Previously"></a>Previously</h1><p>My way of releasing <a href="https://github.com/laurentkempe/GitDiffMargin" target="_blank" rel="noopener">Git Diff Margin</a> was tedious with lots of manual steps</p><p></p><p></p><ol><li>Update versions in all AssemblyInfo.cs, in source.extension.vsixmanifest</li><li>Build on my local machine</li><li>Get the vsix, install it in Visual Studio and test it</li><li>Tag with Git and push to Github</li><li>Login to the Visual Studio marketplace, upload by hand the vsix, adapt the description and publish</li><li>Create a release on Github, upload by hand the vsix, adapt the description and publish</li><li>Login to Chocolatey.org, upload by hand the nupkg, adapt the description and publish</li></ol><p>There is clearly lots of place for some automation.</p><h1 id="First-improvement"><a href="#First-improvement" class="headerlink" title="First improvement"></a>First improvement</h1><p>For some time, I have used <a href="https://www.appveyor.com/" target="_blank" rel="noopener">AppVeyor</a> to at least have a Continuous Integration build. This was helping already to be sure that a Pull Request would build correctly and to get the vsix artifact built somewhere else than on my developer machine.</p><p>A good step for sure, but not enough to please me.</p><h1 id="Today"><a href="#Today" class="headerlink" title="Today"></a>Today</h1><p>I have greatly reduced the burden using <a href="https://azure.microsoft.com/en-us/services/devops/" target="_blank" rel="noopener">Azure DevOps</a> 💕 and this <strong>at no cost</strong>!<br>Microsoft is supporting the open source community with <a href="https://azure.microsoft.com/en-us/services/devops/pipelines/" target="_blank" rel="noopener">Azure Pipelines</a> with 10 parallel jobs with unlimited minutes for CI/CD! Thanks for that.</p><p>You can watch a great quick intro video from <a href="https://twitter.com/AbelSquidHead" target="_blank" rel="noopener">Abel Wang</a> to get a better idea<br><div class="video-container"><iframe src="//www.youtube.com/embed/NuYDAs3kNV8" frameborder="0" allowfullscreen></iframe></div></p><h2 id="Build-pipeline"><a href="#Build-pipeline" class="headerlink" title="Build pipeline"></a>Build pipeline</h2><p>So, creating a build pipeline on Azure DevOps is the first step and it is super easy! It comes in two flavors; one with a <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/get-started-designer?view=azure-devops&amp;tabs=new-nav" target="_blank" rel="noopener">visual editor</a> and one as a <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&amp;tabs=schema" target="_blank" rel="noopener">YAML file</a>.</p><p>The overall goal of the build pipeline is to</p><p></p><p></p><ol><li>Start a build when something changes on the master branch of <a href="https://github.com/laurentkempe/GitDiffMargin" target="_blank" rel="noopener">Git Diff Margin Github repository</a></li><li>Produce artifacts resulting from a successful build</li></ol><p>To achieve this here are the steps executed by the build pipeline</p><p></p><p></p><ol><li><a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/tool/nuget?view=azure-devops" target="_blank" rel="noopener">Installing Nuget Tool</a></li><li>Updating all AssemblyInfo.cs automatically using <a href="https://marketplace.visualstudio.com/items?itemName=bleddynrichards.Assembly-Info-Task" target="_blank" rel="noopener">Assembly Info extension</a></li><li>Update Git Diff Margin Vsix Version using <a href="https://marketplace.visualstudio.com/items?itemName=SamirBoulema.Vsix-Tools" target="_blank" rel="noopener">Vsix Tools extension</a></li><li>Building Git Diff Margin Visual Studio solution using <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/visual-studio-build?view=azure-devops" target="_blank" rel="noopener">Visual Studio Build task</a></li><li>Running the tests. ❗ Currently, I still need to have this working</li><li><a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/copy-files?view=azure-devops&amp;tabs=yaml" target="_blank" rel="noopener">Copy</a> build artifacts to a staging folder and to the Chocolatey folder</li><li>Run <a href="https://marketplace.visualstudio.com/items?itemName=gep13.chocolatey-azuredevops" target="_blank" rel="noopener">Chocolatey pack</a></li><li>Finally, <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/publish-build-artifacts?view=azure-devops" target="_blank" rel="noopener">publish the build artifacts</a> so that they can be downloaded later on</li></ol><p>You can see that we already automated a good part of the manual tasks that we had to do previously. In fact, now we still need to update the version manually but only in one place which is the Azure DevOps YAML file: <em>azure-pipelines.yml</em>.</p><p>The remaining manual tasks are</p><ol><li>Get the vsix, install it in Visual Studio and test it</li><li>Update README-Marketplace.md file which will be uploaded to the Visual Studio Marketplace as a description file </li><li>Tag with Git and push to Github</li></ol><p>This is the <em>azure-pipelines.yml</em> file which automates the whole build step!</p><script src="//gist.github.com/dcc375c8bd03fb0367b5b6835464b45c.js?file=azure-pipelines.yml"></script><p>By the way, you can get nice <a href="https://docs.microsoft.com/en-us/rest/api/azure/devops/build/badge/get%20build%20badge%20data?view=azure-devops-rest-5.0" target="_blank" rel="noopener">clickable build status badge</a> like the following one</p><p><a href="https://dev.azure.com/techheadbrothers/GitDiffMargin/_build/latest?definitionId=7" target="_blank" rel="noopener"><img src="https://dev.azure.com/techheadbrothers/GitDiffMargin/_apis/build/status/laurentkempe.GitDiffMargin" alt="Build Status"></a> </p><h2 id="Release-pipeline"><a href="#Release-pipeline" class="headerlink" title="Release pipeline"></a>Release pipeline</h2><p>Now that we have access to the build artifacts; <a href="https://marketplace.visualstudio.com/items?itemName=LaurentKempe.GitDiffMargin" target="_blank" rel="noopener">GitDiffMargin.vsix for the Visual Studio Marketplace</a> and <a href="https://www.chocolatey.org/packages/GitDiffMargin" target="_blank" rel="noopener">GitDiffMargin.nupkg for Chocolatey</a> we can automate the next step through a <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/release/?view=azure-devops" target="_blank" rel="noopener">Azure DevOps release pipeline</a>.</p><p>In this step, we would like to automate the following</p><ol start="5"><li>Login to the Visual Studio marketplace, upload by hand the vsix, adapt the description and publish</li><li>Create a draft release on Github, upload by hand the vsix, create a description based on changes</li><li>Login to Chocolatey.org, upload by hand the nupkg, adapt the description and publish</li></ol><p>For that, we created a release pipeline job named “Marketplace - Github - Choco” with 3 tasks connected to our previously defined build pipeline artifacts<br><div class="figure center" style="width:653;"><img class="fig-img" src="https://farm8.staticflickr.com/7807/32349146347_f88d9b1fce_o.png" style="width:653;height:423;" alt="Azure DevOps Release pipeline"><span class="caption">Azure DevOps Release pipeline</span></div><div style="clear:both;"></div></p><p>In the details<br><div class="figure center" style="width:642;"><img class="fig-img" src="https://farm8.staticflickr.com/7840/47290958411_251b163117_o.png" style="width:642;height:296;" alt="Azure DevOps Release pipeline tasks"><span class="caption">Azure DevOps Release pipeline tasks</span></div><div style="clear:both;"></div></p><p>The first task publish Git Diff Margin to Visual Studio Extension using <a href="https://marketplace.visualstudio.com/items?itemName=ms-devlabs.vsts-developer-tools-build-tasks" target="_blank" rel="noopener">Azure DevOps Extension Tasks</a></p><script src="//gist.github.com/dcc375c8bd03fb0367b5b6835464b45c.js?file=azure-vs-release-pipelines.yml"></script><p>The second task creates a GitHub release draft using <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/github-release?view=azure-devops" target="_blank" rel="noopener">GitHub Release task</a></p><script src="//gist.github.com/dcc375c8bd03fb0367b5b6835464b45c.js?file=azure-github-release-pipelines.yml"></script><p>The third task publish to Chocolatey using <a href="https://marketplace.visualstudio.com/items?itemName=gep13.chocolatey-azuredevops" target="_blank" rel="noopener">Chocolatey</a></p><script src="//gist.github.com/dcc375c8bd03fb0367b5b6835464b45c.js?file=azure-chocolatey-release-pipelines.yml"></script><p>The release pipeline is triggered manually when I am ready to publish a new version</p><div class="figure center" style="width:661;"><img class="fig-img" src="https://farm8.staticflickr.com/7820/46376429945_e3fde68d19_o.png" style="width:661;height:142;" alt="Azure DevOps Releasing"><span class="caption">Azure DevOps Releasing</span></div><div style="clear:both;"></div><p>And if everything worked correctly you see the following result<br><div class="figure center" style="width:687;"><img class="fig-img" src="https://farm8.staticflickr.com/7883/40326503893_58116c2328_o.png" style="width:687;height:497;" alt="Azure DevOps Release result"><span class="caption">Azure DevOps Release result</span></div><div style="clear:both;"></div></p><p>And now people have access to the latest version of Git Diff Margin on <a href="https://marketplace.visualstudio.com/items?itemName=LaurentKempe.GitDiffMargin" target="_blank" rel="noopener">Visual Studio Marketplace</a>, on <a href="https://github.com/laurentkempe/GitDiffMargin/releases/tag/v3.9.3" target="_blank" rel="noopener">Github release</a> and on <a href="https://www.chocolatey.org/packages/GitDiffMargin/" target="_blank" rel="noopener">Chocolatey</a>.</p><p>Finally, we achieved our goal and let the machines do the work, which saves us time and avoid some mistakes.</p><h1 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h1><ul><li><a href="https://www.gep13.co.uk/" target="_blank" rel="noopener">Gary Ewan Park</a> aka <a href="https://twitter.com/gep13" target="_blank" rel="noopener">@gep13</a> for the great help he provided me on the <a href="https://www.chocolatey.org/" target="_blank" rel="noopener">Chocolatey</a> part of this journey!</li><li><a href="https://github.com/onlyutkarsh" target="_blank" rel="noopener">Utkarsh Shigihalli</a> aka <a href="https://twitter.com/onlyutkarsh" target="_blank" rel="noopener">@onlyutkarsh</a> for <a href="https://github.com/Microsoft/vsts-extension-build-release-tasks/issues/103" target="_blank" rel="noopener">extending of Azure DevOps Extension Tasks for the Visual Studio marketplace</a></li></ul><h1 id="Git-Diff-Margin-feature-demo"><a href="#Git-Diff-Margin-feature-demo" class="headerlink" title="Git Diff Margin feature demo"></a>Git Diff Margin feature demo</h1><p><a data-flickr-embed="true" href="https://www.flickr.com/photos/laurentkempe/14879945429/" title="Git Diff Margin features demo" target="_blank" rel="noopener"><img src="https://farm6.staticflickr.com/5562/14879945429_cc40e1db81_o.jpg" width="480" height="360" alt="Git Diff Margin features demo"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;As you might have guessed reading some of my older posts, I like to automate things which I believe a computer should do in place of humans.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Visual Studio" scheme="https://laurentkempe.com/tags/Visual-Studio/"/>
    
      <category term="Azure DevOps" scheme="https://laurentkempe.com/tags/Azure-DevOps/"/>
    
      <category term="Chocolatey" scheme="https://laurentkempe.com/tags/Chocolatey/"/>
    
      <category term="Github" scheme="https://laurentkempe.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Dynamically compile and run code using .NET Core 3.0</title>
    <link href="https://laurentkempe.com/2019/02/18/dynamically-compile-and-run-code-using-dotNET-Core-3.0/"/>
    <id>https://laurentkempe.com/2019/02/18/dynamically-compile-and-run-code-using-dotNET-Core-3.0/</id>
    <published>2019-02-18T19:30:12.000Z</published>
    <updated>2019-02-18T19:56:59.978Z</updated>
    
    <content type="html"><![CDATA[<p>Let’ see in this blog post the new possibility offered by <strong>.NET Core 3.0 preview 2</strong> to load and unload assemblies at run time using <strong><a href="https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Runtime/Loader/AssemblyLoadContext.cs#L14" target="_blank" rel="noopener">AssemblyLoadContext</a></strong>.</p><a id="more"></a><p>You can read more about it on the <a href="https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/assemblyloadcontext.md" target="_blank" rel="noopener">dotnet / coreclr github repository</a>. You can also see the progress of the .NET Core team on that particular topic on the <a href="https://github.com/dotnet/coreclr/projects/9" target="_blank" rel="noopener">Unloadability Github project page</a>.</p><blockquote><p>Here are some of the scenarios that motivated this work:</p><ul><li>Ability to load multiple versions of the same assembly within a given process (e.g. for plugin frameworks)</li><li>Ability to load assemblies explicitly in a context isolated from that of the application.</li><li>Ability to override assemblies being resolved from application context.</li><li>Ability to have isolation of statics (as they are tied to the LoadContext)</li><li>Expose LoadContext as a first class concept for developers to interface with and not be a magic.</li></ul></blockquote><p>In our case, the idea of this tiny project is the following:</p><ul><li>Watch a C# source code file for any modification using Rx and the FileWatcher</li><li>On any change on that file, load it in memory as text</li><li>Compile the file using Roslyn into an assembly which is kept in memory</li><li>Execute the entry point of the assembly</li><li>Unload the assembly</li></ul><p>We will start with a simple hello world application, what else 😉 and we will allow the main application to pass some arguments to the dynamically compiled assembly.</p><p>First, we are using some Rx code to observe the file, I won’t go into that detail because it is not the purpose of that post. The code is coming from <a href="https://github.com/g0t4" target="_blank" rel="noopener">Wes Higbee</a> from the repository <a href="https://github.com/g0t4/Rx-FileSystemWatcher" target="_blank" rel="noopener">g0t4/Rx-FileSystemWatcher</a>.</p><p>We are using Rx-FileSystemWatcher to observe the <em>Sources</em> folder and filter for <em>DynamicProgram.cs</em>. When this file is changed, we trigger the build, load the assembly generated, find the entry point and invoke it passing “France” as the first parameter.</p><p><div style="clear:both;"></div><script src="//gist.github.com/1ea03376d0ef2a4da3358ab2629cccf2.js?file=Program.cs"></script></p><p>The main program delegates the compilation to the <em>Compiler</em> class, which is using Roslyn to compile the C# file <em>DynamicProgram.cs</em>. If there are some compilation errors, those are displayed on the console output. Otherwise, the compilation result is a <em>Hello.dll</em> returned as a byte array.</p><p><div style="clear:both;"></div><script src="//gist.github.com/1ea03376d0ef2a4da3358ab2629cccf2.js?file=Compiler.cs"></script></p><p>Then, the main program delegate to the <em>Runner</em> class which is in charge of loading and executing the entry point of the just compiled new assembly.<br>We are marking the method <em>LoadAndExecute</em> with <strong>[MethodImpl(MethodImplOptions.NoInlining)]</strong> so that the method cannot be inlined and to ensure that nothing would be kept alive.</p><p><div style="clear:both;"></div><script src="//gist.github.com/1ea03376d0ef2a4da3358ab2629cccf2.js?file=Runner.cs"></script></p><p>We are loading the assembly using our own simple implementation of <strong>AssemblyLoadContext</strong>, this is just to mark that the context is collectible. So that we can unload the assembly using the method <strong>AssemblyLoadContext.Unload()</strong>.</p><p><div style="clear:both;"></div><script src="//gist.github.com/1ea03376d0ef2a4da3358ab2629cccf2.js?file=SimpleUnloadableAssemblyLoadContext.cs"></script></p><p>In fact, the unloading does not happen immediately, it will wait that the GC collect the assembly. This is why we are calling <strong>GC.Collect()</strong> and <strong>GC.WaitForPendingFinalizers()</strong> in the <em>Execute</em> method. This is not mandatory but in our case, we want to be sure that the previous assembly is unloaded before compiling and loading the new one.</p><p>Let’s run the application, change the file Program.cs in the folder Sources and see it working 😎</p><img src="https://raw.githubusercontent.com/laurentkempe/DynamicRun/master/doc/screenshot.png" title="Running"><p>This is opening some new capabilities which we might explore in some new posts!</p><p>You can access to the whole project on Github, <a href="https://github.com/laurentkempe/DynamicRun" target="_blank" rel="noopener">laurentkempe/DynamicRun</a>.</p><p>Finally, you can read even more about it on “<a href="https://github.com/dotnet/coreclr/blob/a7cbc5c8d1bd48cafec48ac50900ff9e96c1485c/Documentation/project-docs/unloadability-howto.md" target="_blank" rel="noopener">Using and debugging unloadability in .NET Core</a>“ and can also have a look at this interesting project  <a href="https://github.com/natemcmaster/DotNetCorePlugins" target="_blank" rel="noopener">natemcmaster/DotNetCorePlugins</a> which starts to talk about the same topic on “<a href="https://github.com/natemcmaster/DotNetCorePlugins/issues/16" target="_blank" rel="noopener">Make plugins unloadable</a>“.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Let’ see in this blog post the new possibility offered by &lt;strong&gt;.NET Core 3.0 preview 2&lt;/strong&gt; to load and unload assemblies at run time using &lt;strong&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Runtime/Loader/AssemblyLoadContext.cs#L14&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AssemblyLoadContext&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term=".NET Core" scheme="https://laurentkempe.com/tags/NET-Core/"/>
    
      <category term="Roslyn" scheme="https://laurentkempe.com/tags/Roslyn/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core Community online Hackathon</title>
    <link href="https://laurentkempe.com/2018/06/06/dotnet-core-community-online-hackathon/"/>
    <id>https://laurentkempe.com/2018/06/06/dotnet-core-community-online-hackathon/</id>
    <published>2018-06-06T06:20:54.000Z</published>
    <updated>2019-01-28T19:25:48.354Z</updated>
    
    <content type="html"><![CDATA[<p>On Saturday, June 2, 2018, I had the chance to participate in the .NET Core Community online Hackathon.</p><p>As I got up really early this Saturday morning, I took the opportunity to participate. My goal was to see something new and learn a bit about how .NET Core is built and gain some new experience.<br><a id="more"></a></p><p>I heard about the online Hackathon on a tweet of Karel Zikmund <div class="twitter-wrapper"><blockquote class="twitter-tweet"><a href="https://twitter.com/ziki_cz/status/999804438104625153" target="_blank" rel="noopener"></a></blockquote></div><script async defer src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p><p>Then reading about it on the <a href="https://github.com/dotnet/corefx/wiki/Hackathon" target="_blank" rel="noopener">Github page</a> linked to the tweet I decided to participate.</p><p>I wanted to start with a really small thing because I wasn’t sure about the time I had, and I wanted to be sure to finish it!</p><p>I decided to go with <a href="https://github.com/dotnet/corefx/blob/master/README.md" target="_blank" rel="noopener">CoreFX</a> because it seemed easier than <a href="https://github.com/dotnet/coreclr/blob/master/README.md" target="_blank" rel="noopener">CoreCLR</a>. I also had a look to <a href="https://github.com/dotnet/corefxlab/blob/master/README.md" target="_blank" rel="noopener">CoreFxLab</a>. And I might implement something there later as there is some migration to <a href="https://benchmarkdotnet.org/" target="_blank" rel="noopener">Benchmark.DotNet</a> which I would also like to learn a bit about.</p><p>I joined the <a href="https://gitter.im/dotnet/corefx-hackathon?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge" target="_blank" rel="noopener">gitter chat</a> which proved to be really helpful.</p><p>Then I picked the <a href="https://github.com/dotnet/corefx/issues/19624" target="_blank" rel="noopener">issue #19624, Remove conditional compilation in System.Diagnostics.Tracing</a> from CoreFX.</p><p>I went and started to read <a href="https://github.com/dotnet/corefx/wiki/New-contributor-Docs#contributing-guide" target="_blank" rel="noopener">contribution guide</a> and started by installing the tooling, making a fork and clone of the CoreFX repo! All went quite well, even if the documentation could be improved in some places.</p><p>I tried to have the tests running inside Visual Studio, but after some pains and no success with <a href="https://www.jetbrains.com/resharper/?fromMenu" target="_blank" rel="noopener">ReSharper</a> and <a href="(https://visualstudio.microsoft.com/">Visual Studio</a>, I asked some help on the gitter which <a href="https://github.com/ViktorHofer" target="_blank" rel="noopener">Viktor Hofer</a> <a href="https://gitter.im/dotnet/corefx-hackathon?at=5b1259f5f9f2e56cf234c485" target="_blank" rel="noopener">provided kindly</a>. You need to use the command </p><figure class="highlight plain"><figcaption><span>Running tests from MSBuild</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msbuild /t:RebuildAndTest</span><br></pre></td></tr></table></figure><p>By running the tests I found an issue with one tests and quickly guessed that it was because my Windows 10 Pro installation is in en-US and I set my first day of the week to Monday! So I reported the <a href="https://github.com/dotnet/corefx/issues/30074" target="_blank" rel="noopener">issue on Github</a>. The issue went through a discussion in the team and was finally fixed after being first rejected. I have to say that I agree that when someone clones a repository and run the tests, then everything should be working even in a weird setting like mine.</p><p>Back to my pull request, <a href="https://github.com/dotnet/corefx/pull/30071" target="_blank" rel="noopener">Remove FEATURE_ETLEVENTS conditional compilation</a> which was super easy, nothing really hard when you just need to remove conditional compilation. I just had to disable some Visual Studio plugin which format the code, especially removing extra spaces at the end of lines, which I was surprised to see on some files.</p><p>Finally after reviews and final approval from <a href="https://github.com/stephentoub" target="_blank" rel="noopener">Stephen Toub</a> the pull request was merged and will be part of .NET Core 3.0!</p><p><img src="https://farm2.staticflickr.com/1839/29090676488_e79f80d854_o.png" alt="Pull Request merged"></p><p>So in the end, I was able to fix one issue due for the hackathon, created one issue which was fixed by the team and had some fun and some learning participating in this online Hackathon!</p><p>Thanks for organizing it and thanks to the people from the team which was present and helped us!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;On Saturday, June 2, 2018, I had the chance to participate in the .NET Core Community online Hackathon.&lt;/p&gt;
&lt;p&gt;As I got up really early this Saturday morning, I took the opportunity to participate. My goal was to see something new and learn a bit about how .NET Core is built and gain some new experience.&lt;br&gt;
    
    </summary>
    
    
      <category term=".NET Core" scheme="https://laurentkempe.com/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title>Automating my development machine installation</title>
    <link href="https://laurentkempe.com/2018/06/01/Automating-development-machine-installation/"/>
    <id>https://laurentkempe.com/2018/06/01/Automating-development-machine-installation/</id>
    <published>2018-06-01T16:15:12.000Z</published>
    <updated>2018-12-17T11:08:39.566Z</updated>
    
    <content type="html"><![CDATA[<p>Since Microsoft went to <a href="https://docs.microsoft.com/en-us/windows/deployment/update/waas-quick-start" target="_blank" rel="noopener">Windows as a service</a>, so since Windows 10, I fully re-install my development machine, a Surface Book, with each main release of Windows.</p><p>As I hate to lose time, I searched a way to automate it, so that it is fast, repeatable and does the work, not me.<br><a id="more"></a></p><p><strong>TL; DR;</strong> (Spoiler) Install your development environment tools with one click on a hyperlink!</p><p>Since long, I am using <strong><a href="https://chocolatey.org/" target="_blank" rel="noopener">Chocolatey</a></strong>, <strong>the package manager for Windows</strong>, to install some of my tools. I even created an installation of <a href="https://marketplace.visualstudio.com/items?itemName=LaurentKempe.GitDiffMargin" target="_blank" rel="noopener">Git Diff Margin</a>, my Visual Studio extension displaying live changes of the currently edited file on Visual Studio 2012+ margin and scrollbar. Note to me, update the package to the latest version of Git Diff Margin.</p><p>That’s already a fantastic step forward, you type one command line like this</p><blockquote><p>choco install git -y</p></blockquote><p>and you get Git installed without doing anything, except typing the command! No need to search on which website you need to download the software, download it, maybe extract it to finally be able to run it and click next-next-next (eh Cédric). Just one command on the command line and you are done. Great, no?</p><p>But after re-installing my machine this way a first time and a second time I wanted more automation. So I decided to dig deeper in a tool I found also a long time ago but never took the time to use; <strong><a href="https://boxstarter.org/" target="_blank" rel="noopener">Boxstarter</a>: repeatable, reboot resilient Windows environment installations made easy using Chocolatey packages</strong>. Seems to exactly match what I wanted to achieve for the next level of automation.</p><p>So I searched some examples on Github and cooked my own script which I open sourced and called it <strong><a href="https://github.com/laurentkempe/Cacao/blob/master/PrepareMyCacao.ps1" target="_blank" rel="noopener">Cacao</a></strong>. A nice name, no :D?</p><div class="figure center" style="width:375;"><a class="fancybox" href="https://farm5.staticflickr.com/4616/40521281581_57a9b1d503_o.jpg" title="Cabosse de cacaoyer, Martinique" data-caption="Cabosse de cacaoyer, Martinique" data-fancybox="martinique" target="_blank" rel="noopener"><img class="fig-img" src="https://farm5.staticflickr.com/4616/40521281581_3d775063cc.jpg" style="width:375;height:500;" alt="Cabosse de cacaoyer, Martinique"></a><span class="caption">Cabosse de cacaoyer, Martinique</span></div><p>So now, when I have installed my Windows 10 machine from scratch I just need to install Boxstarter, download my script and launch it! A very nice step forward indeed.</p><p>Wait can’t we do better, there is still quite some things to do by hand, and you need to remember those things!<br>What do you think of being able to click on a hyperlink, click on OK then everything would be installed for you by little pixies while you do something else? That would be just fantastic. The best is that it is possible!</p><p>You can see such a link on <a href="https://github.com/laurentkempe/Cacao/blob/master/README.md" target="_blank" rel="noopener">Cacao README.md file</a> search for the text ‘Install my tools!’.</p><p>This link is built as following</p><figure class="highlight html"><figcaption><span>Cacao install hyperlink</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'http://boxstarter.org/package/nr/url?https://raw.githubusercontent.com/laurentkempe/Cacao/master/PrepareMyCacao.ps1'</span>&gt;</span></span><br><span class="line">  Install my tools!</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>So easy and so powerful. You append the hyperlink to the raw URL of your script to an URL which will install Boxstarter, and that does the trick!</p><p>So now we are ready to install development environment tools by one click on a hyperlink! What do you want more?</p><p>During the Build2018 Microsoft got interested in that topic, which is great, and you can read about it in their blog post “<a href="https://blogs.msdn.microsoft.com/commandline/2018/05/08/join-us-for-a-hot-cup-o-chocolatey/" target="_blank" rel="noopener">Join us for a hot cup o Chocolatey!</a>“ and on their Github repo <a href="https://github.com/Microsoft/windows-dev-box-setup-scripts" target="_blank" rel="noopener">windows-dev-box-setup-scripts</a>.</p><p>One fantastic side effect is that now I can also update all my tools by running one command</p><blockquote><p>choco upgrade all -y</p></blockquote><p>Like they say, there’s never been a better time to be a developer!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Since Microsoft went to &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/deployment/update/waas-quick-start&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Windows as a service&lt;/a&gt;, so since Windows 10, I fully re-install my development machine, a Surface Book, with each main release of Windows.&lt;/p&gt;
&lt;p&gt;As I hate to lose time, I searched a way to automate it, so that it is fast, repeatable and does the work, not me.&lt;br&gt;
    
    </summary>
    
    
      <category term="Windows" scheme="https://laurentkempe.com/tags/Windows/"/>
    
      <category term="PowerShell" scheme="https://laurentkempe.com/tags/PowerShell/"/>
    
  </entry>
  
  <entry>
    <title>Debugging into ASP.NET Core 2.0 source code</title>
    <link href="https://laurentkempe.com/2017/09/26/Debugging-into-ASP.NET-Core-2.0-source-code/"/>
    <id>https://laurentkempe.com/2017/09/26/Debugging-into-ASP.NET-Core-2.0-source-code/</id>
    <published>2017-09-26T18:44:11.000Z</published>
    <updated>2018-12-17T11:08:39.362Z</updated>
    
    <content type="html"><![CDATA[<p>I am just back from 2.5 months unpaid leave which I used to spend time with my family. So, I almost did not spend time with software development. One exception is that I wanted to be able to configure Visual Studio 2017 to be able to debug into ASP.NET Core 2.0 source code.<br><a id="more"></a><br>Something which should have been simple didn’t work for long because Microsoft wasn’t publishing the PDBs. There were other ways to achieve that goal but it was fairly complex, so I decided to wait. Now, this has changed with the release of ASP.NET Core 2.0.</p><p>But first, why would you want to step into the source code of ASP.NET Core 2.0?<br>In my case, I find it very helpful to understand how the framework is working. So it is a great way to learn the internals of the framework and I am most particularly interested about the compilation of Razor pages.</p><p>Finally, the team uploaded the PDBs of ASP.NET Core 2.0 on the Microsoft Symbol Servers. And it is coming with a bonus feature of Visual Studio 2017 15.3; Source Link Support for Windows PDB File Format, which makes everything easy again.</p><blockquote><p></p><p>Source Link is now supported for Windows PDB file format (in addition to Portable PDBs). Compilers that support it can put the necessary information in the Windows PDB file format and the debugger can retrieve source files based on that information.<br></p><footer><strong>Microsoft</strong><cite><a href="https://www.visualstudio.com/en-us/news/releasenotes/vs2017-relnotes#source-link-support-for-windows-pdb-file-format" target="_blank" rel="noopener">Visual Studio 2017 version 15.3 Release Notes</a></cite></footer></blockquote><p></p><p>In this post, I will show you the fastest way to setup Visual Studio 2017 15.3 so that you can debug into ASP.NET Core 2.0 source code!</p><p>To start you can either use your current application or create a new ASP.NET Core 2.0 Web application.<br>I have Visual Studio 2017.3 default collection settings set to Web Development.</p><p>Open you Startup class, and set a breakpoint on the ConfigureServices method, then if you start a debugging session with F5 you will end up in this situation</p><p><img src="https://farm5.staticflickr.com/4343/37372298705_65a2054a8d_c.jpg" alt></p><p>In the Call Stack window, we see only our code and [External Code]</p><p>Open Visual Studio options dialog, even without stopping your debugging session, using menu <strong>Tools / Options</strong> and choose <strong>Debugging</strong>, then untick <strong>Enable Just My Code</strong>. Click OK. Now the Call Stack Window show you much more like this</p><p><img src="https://farm5.staticflickr.com/4427/37372901855_bc43c1e579_c.jpg" alt></p><p>We see now, our code is called from <em>Microsoft.AspNetCore.Hosting.dll</em></p><p>Right click on Microsoft.AspNetCore.Hosting.dll and choose <strong>Load Symbols</strong></p><p><img src="https://farm5.staticflickr.com/4406/37287703876_296032f829_c.jpg" alt></p><p>Then the following dialog will be shown, give it some time to download the symbols from Microsoft Symbol Servers</p><p><img src="https://farm5.staticflickr.com/4417/23483587158_1b3d16d4fc_z.jpg" alt></p><p>Now you should see the <em>Microsoft.AspNetCore.Hosting.dll</em> in white in the Call Stack window and right-clicking it, you can now choose <strong>Go To Source Code</strong></p><p><img src="https://farm5.staticflickr.com/4478/36625825424_87d424b7ef_c.jpg" alt></p><p>Finally the new Source Link dialog popup and let you download the source automatically </p><p><img src="https://farm5.staticflickr.com/4470/23483589828_59452c0da4_z.jpg" alt></p><p>You finally end up in the ASP.NET Core 2 source code, can set breakpoints and inspect some of the variables!</p><p><img src="https://farm5.staticflickr.com/4502/23483591168_c99dd6953f_c.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I am just back from 2.5 months unpaid leave which I used to spend time with my family. So, I almost did not spend time with software development. One exception is that I wanted to be able to configure Visual Studio 2017 to be able to debug into ASP.NET Core 2.0 source code.&lt;br&gt;
    
    </summary>
    
    
      <category term="ASP.NET Core" scheme="https://laurentkempe.com/tags/ASP-NET-Core/"/>
    
      <category term="Visual Studio 2017" scheme="https://laurentkempe.com/tags/Visual-Studio-2017/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core MVC app running on Raspberry Pi</title>
    <link href="https://laurentkempe.com/2017/04/14/ASPNET-Core-MVC-app-running-on-raspberry-pi/"/>
    <id>https://laurentkempe.com/2017/04/14/ASPNET-Core-MVC-app-running-on-raspberry-pi/</id>
    <published>2017-04-14T15:26:06.000Z</published>
    <updated>2018-12-17T11:08:39.325Z</updated>
    
    <content type="html"><![CDATA[<p>After running a first console app on my Raspberry Pi 3, I had to try ASP.NET Core and API. Two weeks ago when I posted <a href="http://laurentkempe.com/2017/04/03/Dotnet-Core-app-running-on-raspberry-pi/">“.NET Core console app running on Raspberry Pi”</a>, I could make API working, but I had no chance with MVC. Today it worked!</p><a id="more"></a><p>This post will describe all steps I had to go through to have an ASP.NET Core MVC application running on my Raspberry Pi 3. I will not repeat the steps needed to install the Ubuntu MATE on the Pi, neither how to install the different tools, e.g., SSH Server, Putty, WinSCP… to have an efficient development environment, you can check the previous post for that.</p><p>Again you will need to install the .NET Core 2.0 SDK on your Windows machine. This time I used <a href="https://github.com/dotnet/cli/tree/master" target="_blank" rel="noopener">Windows x64 2.0.0-preview1-005791</a> which I downloaded as a zip. I unzipped it, and then I added it to the System Path.</p><p>So now when I run dotnet with the help flag, I see the following, and I am sure to run the correct version</p><p><div style="clear:both;"></div><script src="//gist.github.com/38e29bb3942d167a252d13e56d8a45a9.js?file=dotnetHelp"></script></p><p>Next, we will create the <a href="https://docs.microsoft.com/en-us/aspnet/core/" target="_blank" rel="noopener">ASP.NET Core MVC</a> project using the following</p><p><div style="clear:both;"></div><script src="//gist.github.com/38e29bb3942d167a252d13e56d8a45a9.js?file=createProject"></script></p><p>Now we have to adapt the <strong>mvc.csproj</strong> like this</p><p><div style="clear:both;"></div><script src="//gist.github.com/38e29bb3942d167a252d13e56d8a45a9.js?file=mvc.csproj"></script></p><p>We removed the <em>PackageTargetFallback</em> and added <em>RuntimeFrameworkVersion</em>, <em>RuntimeIdentifiers</em>.</p><p>To get access on the network to our ASP.NET Core MVC application we must first adapt the generated <strong>Program.cs</strong> file, to add the line <strong>.UseUrls(“http://*:8000”)</strong></p><p><div style="clear:both;"></div><script src="//gist.github.com/38e29bb3942d167a252d13e56d8a45a9.js?file=Program.cs"></script></p><p>This code change will instruct the framework to bind to all network cards available on the PI, and thus make the web application accessible from your network.</p><p>Then we need to run the restore command</p><p><div style="clear:both;"></div><script src="//gist.github.com/38e29bb3942d167a252d13e56d8a45a9.js?file=dotnetRestore"></script></p><p>Then we publish </p><p><div style="clear:both;"></div><script src="//gist.github.com/38e29bb3942d167a252d13e56d8a45a9.js?file=dotnetPublish"></script></p><p>We use WinSCP to copy all the files create in the folder <em>C:\@Projects\pi\mvc\bin\Debug\netcoreapp2.0\ubuntu.16.04-arm32\publish\</em> to the Raspberry Pi. Then we run the application from Putty</p><p><div style="clear:both;"></div><script src="//gist.github.com/38e29bb3942d167a252d13e56d8a45a9.js?file=dotnetMVC"></script></p><p>Now we are ready to display our first web page using ASP.NET Core MVC running on the Raspberry Pi 3. The first time your browse the site, it will be slow because the Raspberry Pi needs to compile the Razor Page, but you will finally end in front of</p><p><img src="https://c1.staticflickr.com/3/2818/33902220761_b539cfd3fa_o.png" alt="ASP.NET Core MVC on Raspberry PI"></p><p>Enjoy!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;After running a first console app on my Raspberry Pi 3, I had to try ASP.NET Core and API. Two weeks ago when I posted &lt;a href=&quot;http://laurentkempe.com/2017/04/03/Dotnet-Core-app-running-on-raspberry-pi/&quot;&gt;“.NET Core console app running on Raspberry Pi”&lt;/a&gt;, I could make API working, but I had no chance with MVC. Today it worked!&lt;/p&gt;
    
    </summary>
    
    
      <category term=".NET Core" scheme="https://laurentkempe.com/tags/NET-Core/"/>
    
      <category term="Raspberry Pi" scheme="https://laurentkempe.com/tags/Raspberry-Pi/"/>
    
      <category term="Linux" scheme="https://laurentkempe.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core console app running on Raspberry Pi</title>
    <link href="https://laurentkempe.com/2017/04/03/Dotnet-Core-app-running-on-raspberry-pi/"/>
    <id>https://laurentkempe.com/2017/04/03/Dotnet-Core-app-running-on-raspberry-pi/</id>
    <published>2017-04-03T19:40:07.000Z</published>
    <updated>2018-12-17T11:08:39.369Z</updated>
    
    <content type="html"><![CDATA[<p>Now that there is a distribution of .NET Core on a Linux distro running on my <a href="https://www.raspberrypi.org/products/raspberry-pi-3-model-b/" target="_blank" rel="noopener">Raspberry Pi 3</a>, I had to try it.</p><p>In this post, I will explain all the steps I had to execute to be able to run my first Hello World application.<br><a id="more"></a><br>First, you will need to install on your Pi the <a href="https://ubuntu-mate.org/raspberry-pi/" target="_blank" rel="noopener">Ubuntu MATE distribution</a>. Currently, the RASPBIAN distribution, which is the mostly used, is not supported but it seems that it will be soon the case according to this <a href="https://github.com/dotnet/core/issues/447" target="_blank" rel="noopener">Github issue on dotnet / core</a>.</p><p>Download <a href="https://ubuntu-mate.org/download/" target="_blank" rel="noopener">Ubuntu MATE 16.04.2 LTS for Raspberry Pi</a>, then extract the image out of the archive.</p><p>To install it on your microSDHC, the best is to use <a href="https://chocolatey.org/packages/win32diskimager" target="_blank" rel="noopener">Win32 Disk Imager</a> which you can install using Chocolatey with the command ‘<em>choco install win32diskimager</em>‘.</p><p>Then just write the image you extracted on your microSDHC using Win32 Disk Imager, like this:</p><p><img src="https://c1.staticflickr.com/3/2822/32957708953_4ff95b973b_o.png" alt></p><p>Wait a couple of minutes then plug the microSDHC in your Pi and boot it, then follow the installation instruction and create your user.</p><p>Currently, there is no .NET Core SDK running on ARM processor, the CPU architecture of the Pi. So you will have to write and compile your program from another machine, in my case I run on Windows.</p><p>Now to simplify all the operations I installed a SSH server on the Pi to make it easy to access it remotely and copy files from my Surface.</p><p>To install the SSH server, run a shell, and run the following commands</p><p><div style="clear:both;"></div><script src="//gist.github.com/75b6b70d1bcdc3b4caa030160dbcb018.js?file=installSSSHServer"></script></p><p>Then we will need to install some .NET Core native prerequisites for Ubuntu as explained on the <a href="https://github.com/dotnet/core/blob/master/Documentation/prereqs.md" target="_blank" rel="noopener">Github dotnet / core documentation</a>.</p><p><div style="clear:both;"></div><script src="//gist.github.com/cf534c59a094654491e28b0d1701738a.js?file=prerequisites"></script></p><p>You will need the IP of your Pi, so use the command ‘<em>ifconfig</em>‘ which will output something like that</p><p><img src="https://c2.staticflickr.com/4/3816/32957721773_5f33093414_o.png" alt></p><p>Then back to your PC, install <a href="https://chocolatey.org/packages/putty" target="_blank" rel="noopener">Putty</a> using ‘<em>choco install putty</em>‘ and <a href="https://chocolatey.org/packages/winscp" target="_blank" rel="noopener">WinSCP</a> using ‘<em>choco install winscp</em>‘.</p><p>Configure both Putty and WinSCP to connect to your Pi using the IP address you’ve got from the ifconfig command</p><p>Now that we have the Pi running the right Linux distribution on it and we can connect to it easily from our computer, it is time to create a first .NET Core project. For sure, we will start with the famous Hello World.</p><p><a href="https://github.com/dotnet/cli/tree/master" target="_blank" rel="noopener">Install .NET Core 2.0 SDK</a>, I used the Windows x64 version 2.0.0-preview1-005685 which I downloaded as a zip. Unpack it on your hard drive in a folder named dotnet, then create another folder at the same level called hello and create a new console application:</p><p><div style="clear:both;"></div><script src="//gist.github.com/0b60cae1c6c10ccab6ed3f167e766cb5.js?file=create_project"></script></p><p>Edit the file hello.csproj created in the folder. I use <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code</a> for that, which again can be installed using <a href="https://chocolatey.org/packages/VisualStudioCode" target="_blank" rel="noopener">Chocolatey</a> ‘<em>choco install visualstudiocode</em>‘. You will need to update the RuntimeFrameworkVersion with the version that you can find on the page .NET Core Runtime &amp; Host Setup Repo / <a href="https://github.com/dotnet/core-setup#daily-builds" target="_blank" rel="noopener">Daily Builds</a> then <strong>find Ubuntu 16.04 (arm32)</strong> and get the version, in my <strong>case 2.0.0-preview1-005685</strong>.</p><p><div style="clear:both;"></div><script src="//gist.github.com/809deab02a08a52ee17f3cb03a7b39c1.js?file=hello.csproj"></script></p><p>Then run, and publish</p><p><div style="clear:both;"></div><script src="//gist.github.com/98813ec107d827fd3ef3cb6178d36caf.js?file=run_publish"></script></p><p>Finally, you will get the publish results in the folder <strong>.\hello\bin\Debug\netcoreapp2.0\ubuntu.16.04-arm</strong> which you can easily upload to your Pi using WinSCP previously installed.</p><p>You need then to set the hello executable to have the execution rights on the Pi, which you can also do easily from WinSCP</p><p><img src="https://c1.staticflickr.com/3/2806/33821762845_f3033ff9db_o.png" alt></p><p>The final step is to run you hello executable on the Pi, which you can do using Putty over SSH then, or by having your Pi connected to a monitor, mouse, and keyboard!</p><p>Here is the result</p><p><img src="https://c2.staticflickr.com/4/3856/32957716323_e196bc13f0_o.png" alt="Result"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Now that there is a distribution of .NET Core on a Linux distro running on my &lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-3-model-b/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Raspberry Pi 3&lt;/a&gt;, I had to try it.&lt;/p&gt;
&lt;p&gt;In this post, I will explain all the steps I had to execute to be able to run my first Hello World application.&lt;br&gt;
    
    </summary>
    
    
      <category term=".NET Core" scheme="https://laurentkempe.com/tags/NET-Core/"/>
    
      <category term="Raspberry Pi" scheme="https://laurentkempe.com/tags/Raspberry-Pi/"/>
    
      <category term="Linux" scheme="https://laurentkempe.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Build, ship and run ASP.NET Core on Microsoft Azure using Docker Cloud</title>
    <link href="https://laurentkempe.com/2016/07/18/Build-ship-and-run-ASP-NET-Core-on-Microsoft-Azure-using-Docker-Cloud/"/>
    <id>https://laurentkempe.com/2016/07/18/Build-ship-and-run-ASP-NET-Core-on-Microsoft-Azure-using-Docker-Cloud/</id>
    <published>2016-07-18T17:04:21.000Z</published>
    <updated>2018-12-17T11:08:39.347Z</updated>
    
    <content type="html"><![CDATA[<p>In the last posts, we looked at the code to <a href="http://laurentkempe.com/2016/05/16/ASP-NET-Core-RC2-Docker-and-HipChat-Connect-add-on/">build a HipChat Connect add-on with ASP.NET Core</a>, <a href="http://laurentkempe.com/2016/06/08/Deploying-Docker-containers-running-ASPNET-Core-RC2-to-Microsoft-Azure-Cloud/">run the solution in a Docker container</a> and <a href="http://laurentkempe.com/2016/06/20/Free-HTTPS-certificates-for-Docker-containers-running-ASPNET-Core-RC2-on-Microsoft-Azure/">secure the access to the application with a valid HTTPS certificate that we got from Let’s Encrypt for free</a> and finally deploy all of this on Azure!<br><a id="more"></a></p><p>One of my priority while working on new projects is to put in place Continous Integration/Continuous Delivery so that developers can develop and integrate the result of their work in a fast, efficient and easy way.</p><p>We have now all the necessary components to create that Continuous Integration and Continuous Delivery pipeline!</p><p>The goal is to have something which operates like that</p><ol><li>A developer merges something on the master branch of our Github repository</li><li>It triggers a build of a Docker container image using the Dockerfile versioned in Github, which internally compile our new version of our ASP.NET Core web application</li><li>In case of a successful build, it pushes the new Docker container image to a Docker repository</li><li>Finally, the new Docker image is deployed as a Docker container on Azure</li></ol><p>To fulfill those requirements, we will use <a href="https://cloud.docker.com/" target="_blank" rel="noopener">Docker Cloud</a> which lets you</p><blockquote><p>Build, ship, and run - any app, anywhere</p></blockquote><p>Exactly what we need!</p><blockquote><p>Automate Pipelines - Set up a fully automated CI/CD workflow in minutes, from git push to production.</p></blockquote><p>And as we want to use Docker the next argument is also interesting</p><blockquote><p>A Single Docker Platform- Docker Cloud has everything you need to build, ship and run your Dockerized application.</p></blockquote><p>So if you haven’t any Docker account you will first need to create one to be able to log in Docker Cloud.</p><p>Then you will need to <strong>link Docker Cloud to your provider</strong>, <a href="https://docs.docker.com/docker-cloud/infrastructure/link-azure/" target="_blank" rel="noopener">in our case Microsoft Azure</a>.</p><p>Now that Docker Cloud can operate Microsoft Azure, the next step is to <strong>create a node</strong>. A node is a Linux host or virtual machine used to deploy and run containers. It is the equivalent of what we did with the docker-machine command line on the post “<a href="http://laurentkempe.com/2016/06/08/Deploying-Docker-containers-running-ASPNET-Core-RC2-to-Microsoft-Azure-Cloud/">Deploying Docker containers running ASP.NET Core RC2 to Microsoft Azure Cloud</a>“. You can get all the instruction on the page “<a href="https://docs.docker.com/docker-cloud/getting-started/your_first_node/" target="_blank" rel="noopener">Deploy Your First Node</a>“.</p><p>In our case we created the following node:</p><p><img src="https://c4.staticflickr.com/9/8141/27745012403_54637b1580_o.jpg" alt="Docker Cloud node"></p><p>Currently, we have a machine, a node in Docker Cloud wording, so we are ready to deploy our containers on that node. We could <strong>create a service</strong>, which is a container, or a group of containers from the same Docker repository. But we are more interested in <strong>creating a stack</strong>,  which specifies a group of services that make up an application, similar to Docker Compose. As we have seen in “<a href="http://laurentkempe.com/2016/06/20/Free-HTTPS-certificates-for-Docker-containers-running-ASPNET-Core-RC2-on-Microsoft-Azure/">Free HTTPS certificates for Docker containers running ASP.NET Core RC2 on Microsoft Azure</a>,” our application is currently made of two components served as two containers: </p><ol><li>NGINX, reverse proxy and setting up Let’s Encrypt certificates</li><li>Kestrel delivering our ASP.NET Core 1.0 hipchat connect web application</li></ol><p>To create our stack, we are re-using our docker-compose.yml file set up in the previous post</p><p><div style="clear:both;"></div><script src="//gist.github.com/d529fcdf54724a900533f26fa4a768c3.js?file=docker-compose.yml"></script></p><p>which we modify slightly to describe our stack</p><p><div style="clear:both;"></div><script src="//gist.github.com/29165d3e6874cf4cc27d83ead5b8bd28.js?file=stackfile.yml"></script></p><p>The only difference, except the reordering, is to instruct automatic redeployment of the hipchatconnect container when an update of its image occurs in Docker Cloud registry, with the following line</p><blockquote><p>autoredeploy: true</p></blockquote><p>After creating the stack file and hitting the deploy button, we see the result of our stack with its two containers running on our node on Microsoft Azure!</p><p><img src="https://c6.staticflickr.com/9/8737/27745039973_30f15757da_o.jpg" alt="Docker Cloud stack"></p><p>Let’s have a break a moment to see what we have achieved at the moment and what remains to accomplish our goal to have a proper CI/CD pipeline and be able to deploy to production from a simple commit/merge in source code repository.<br>We have at the moment all the infrastructure ready. We have a node which is a machine in Azure running our application which is composed of two Docker containers.<br>So the last point is to connect this infrastructure to our source code repository which is a git repository on Github.</p><p>To do that we will use the <em>Build</em> part offered by Docker Cloud and the repositories. A repository is a collection of tagged images. When you create a service, you choose an image to use to create containers. You can read more about it on the page “<a href="https://docs.docker.com/docker-cloud/builds/repos/" target="_blank" rel="noopener">Docker Cloud repositories</a>“<br>Then we will enable the <a href="https://docs.docker.com/docker-cloud/builds/automated-build/" target="_blank" rel="noopener">autobuild</a> by connecting it to our Github repository which will trigger a new build with every git push to our source code repository.</p><p><img src="https://c6.staticflickr.com/9/8782/28360642885_2f32f1a280_o.jpg" alt="Docker Cloud Github Repository Build"></p><p>Pretty impressive results in such a little effort and short time! I have built some CI/CD in the past, but it wasn’t that easy, we see clearly the potential of today’s tooling that gives us so much power as software engineers!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In the last posts, we looked at the code to &lt;a href=&quot;http://laurentkempe.com/2016/05/16/ASP-NET-Core-RC2-Docker-and-HipChat-Connect-add-on/&quot;&gt;build a HipChat Connect add-on with ASP.NET Core&lt;/a&gt;, &lt;a href=&quot;http://laurentkempe.com/2016/06/08/Deploying-Docker-containers-running-ASPNET-Core-RC2-to-Microsoft-Azure-Cloud/&quot;&gt;run the solution in a Docker container&lt;/a&gt; and &lt;a href=&quot;http://laurentkempe.com/2016/06/20/Free-HTTPS-certificates-for-Docker-containers-running-ASPNET-Core-RC2-on-Microsoft-Azure/&quot;&gt;secure the access to the application with a valid HTTPS certificate that we got from Let’s Encrypt for free&lt;/a&gt; and finally deploy all of this on Azure!&lt;br&gt;
    
    </summary>
    
    
      <category term="ASP.NET Core" scheme="https://laurentkempe.com/tags/ASP-NET-Core/"/>
    
      <category term="Docker" scheme="https://laurentkempe.com/tags/Docker/"/>
    
      <category term="HipChat Connect" scheme="https://laurentkempe.com/tags/HipChat-Connect/"/>
    
      <category term="Microsoft Azure" scheme="https://laurentkempe.com/tags/Microsoft-Azure/"/>
    
  </entry>
  
  <entry>
    <title>Free HTTPS certificates for Docker containers running ASP.NET Core RC2 on Microsoft Azure</title>
    <link href="https://laurentkempe.com/2016/06/20/Free-HTTPS-certificates-for-Docker-containers-running-ASPNET-Core-RC2-on-Microsoft-Azure/"/>
    <id>https://laurentkempe.com/2016/06/20/Free-HTTPS-certificates-for-Docker-containers-running-ASPNET-Core-RC2-on-Microsoft-Azure/</id>
    <published>2016-06-20T17:51:30.000Z</published>
    <updated>2018-12-17T11:08:39.384Z</updated>
    
    <content type="html"><![CDATA[<p>Following my previous posts on <a href>ASP.NET Core RC2, Docker and HipChat Connect add-on</a> and <a href>Deploying Docker containers running ASP.NET Core RC2 to Microsoft Azure Cloud</a> I needed, as promised in the last post, to come with a solution to secure the whole with an HTTPS certificate!<br><a id="more"></a></p><p>So the overall goal is to have my Hipchat Connect add-on written in C# and ASP.NET Core RC2 hosted in a Linux Docker container running in Microsoft Azure and secured by an HTTPS certificate.</p><p>I am following for quite some time the <a href="https://letsencrypt.org/" target="_blank" rel="noopener">Let’s Encrypt</a> project which is just perfect for what I want to do!</p><blockquote><p>Let’s Encrypt is a new Certificate Authority: It’s free, automated, and open.</p></blockquote><p>Now that I know that I can get in an automated way and for free an HTTPS certificate, the question is how should I architecture the solution? The answer is quite simple. As I use Docker, I can plug another Docker container with a reverse proxy in front of my current container which runs the <a href="https://github.com/aspnet/KestrelHttpServer" target="_blank" rel="noopener">Kestrel</a> web server hosting our C# and ASP.NET Core RC2 code.</p><div class="figure center" style="width:;"><img class="fig-img" src="https://c6.staticflickr.com/8/7494/27687906621_782bf08e81_o.jpg" alt="Reverse proxy & Kestrel containers architecture"><span class="caption">Reverse proxy & Kestrel containers architecture</span></div><div style="clear:both;"></div><p>Ok which reverse proxy then? First, I had a look to <a href="https://www.nginx.com/resources/wiki/#" target="_blank" rel="noopener">NGINX</a> which I knew then found <a href="https://traefik.io/" target="_blank" rel="noopener">Traefik</a>. I liked very much the <a href="https://www.youtube.com/watch?v=QvAz9mVx5TI" target="_blank" rel="noopener">DEVOXX presentation, in French</a>, from its author <a href="https://twitter.com/emilevauge" target="_blank" rel="noopener">Emile Vauge</a> and it, supports Let’s Encrypt out of the box.</p><p><div style="clear:both;"></div><div class="video-container"><iframe src="//www.youtube.com/embed/QvAz9mVx5TI" frameborder="0" allowfullscreen></iframe></div></p><p>I tried Traefik but till now could not make it work the way I wanted, so back to NGINX. But I do not give up.</p><p>I searched for a Docker image which runs NGINX and can be configured to get automatically and renew Let’s Encrypt certificates! I finally found <a href="https://github.com/SteveLTN/https-portal" target="_blank" rel="noopener">HTTPS-PORTAL</a> which was looking very promising.</p><blockquote><p>A fully automated HTTPS server powered by Nginx, Let’s Encrypt and Docker.</p></blockquote><p>To achieve the architecture I described before I started to use <a href="https://docs.docker.com/compose/" target="_blank" rel="noopener">Docker compose</a> so that with one command I can start/stop both containers either locally or on Microsoft Azure!</p><p>Following the <a href="https://github.com/SteveLTN/https-portal#quick-start" target="_blank" rel="noopener">documentation of HTTPS-PORTAL</a> I finally got the whole working with the following docker-compose.yml file</p><p><div style="clear:both;"></div><script src="//gist.github.com/d529fcdf54724a900533f26fa4a768c3.js?file=docker-compose.yml"></script></p><p>I fell into a trap, so be aware of it! I got first NGINX 502 Bad gateway error. I thought that the docker-compose.yml part for hipchat had to declare an exposed port. In fact, it doesn’t work like that. We are using links so that both containers are on the same internal network and that they can communicate. But that happens on their internal ports, so in our case for Kestrel and our Docker image, it is the port 5000. To realize that I had to connect to the container using</p><div class="alert info"><p>> docker exec -i -t CONTAINER /bin/bash</p></div><p>I installed wget, got the IP of the Kestrel container and tried to connect to it using wget also to get an error. That’s the moment I realized about the port!</p><p>To have <a href="https://letsencrypt.org/how-it-works/" target="_blank" rel="noopener">Let’s Encrypt set up our HTTPS server</a> and have it automatically obtain a browser-trusted certificate, without any human intervention, we need first to own a domain and to configure the DNS so that it resolves to the public IP of our virtual machine.</p><p>But first of all we need to configure our Azure IP address to be static</p><p><img src="https://c2.staticflickr.com/8/7340/27762904595_2258b2973e_o.png" alt="Microsoft Azure static IP"></p><p>And don’t forget to open the 443 HTTPS port on the Microsoft Azure firewall.</p><p>Now we are ready to start both containers using Docker compose</p><p><div style="clear:both;"></div><script src="//gist.github.com/d529fcdf54724a900533f26fa4a768c3.js?file=docker-compose.exe"></script></p><p>To be able to see what’s going on in the container we can use <em>docker ps</em> then <em>docker logs</em></p><p><div style="clear:both;"></div><script src="//gist.github.com/d529fcdf54724a900533f26fa4a768c3.js?file=docker-ps"></script></p><p><div style="clear:both;"></div><script src="//gist.github.com/d529fcdf54724a900533f26fa4a768c3.js?file=docker-logs"></script></p><p>Finally, we can use a web browser to access our public API now through HTTPS. And we can add the HipChat Connect add-on to one of our room.</p><p><img src="https://c2.staticflickr.com/8/7640/27764957416_3d36d8123c_o.gif" alt="HipChat Connect add-on"></p><p>The next step will be to automate all of this process so that we can develop, build and deploy all of this quickly and automatically!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Following my previous posts on &lt;a href&gt;ASP.NET Core RC2, Docker and HipChat Connect add-on&lt;/a&gt; and &lt;a href&gt;Deploying Docker containers running ASP.NET Core RC2 to Microsoft Azure Cloud&lt;/a&gt; I needed, as promised in the last post, to come with a solution to secure the whole with an HTTPS certificate!&lt;br&gt;
    
    </summary>
    
    
      <category term="ASP.NET Core RC2" scheme="https://laurentkempe.com/tags/ASP-NET-Core-RC2/"/>
    
      <category term="Docker" scheme="https://laurentkempe.com/tags/Docker/"/>
    
      <category term="HipChat Connect" scheme="https://laurentkempe.com/tags/HipChat-Connect/"/>
    
      <category term="Microsoft Azure" scheme="https://laurentkempe.com/tags/Microsoft-Azure/"/>
    
  </entry>
  
  <entry>
    <title>Deploying Docker containers running ASP.NET Core RC2 to Microsoft Azure Cloud</title>
    <link href="https://laurentkempe.com/2016/06/08/Deploying-Docker-containers-running-ASPNET-Core-RC2-to-Microsoft-Azure-Cloud/"/>
    <id>https://laurentkempe.com/2016/06/08/Deploying-Docker-containers-running-ASPNET-Core-RC2-to-Microsoft-Azure-Cloud/</id>
    <published>2016-06-08T11:45:01.000Z</published>
    <updated>2018-12-17T11:08:39.363Z</updated>
    
    <content type="html"><![CDATA[<p>Following my previous post on <a href="https://laurentkempe.com/2016/05/16/ASP-NET-Core-RC2-Docker-and-HipChat-Connect-add-on/">ASP.NET Core RC2, Docker and HipChat Connect add-on</a> I wanted to learn the next step which is to deploy my Docker container on the Microsoft Azure Cloud!<br><a id="more"></a></p><p>Due to a <a href="https://docs.docker.com/machine/drivers/azure/" target="_blank" rel="noopener">known issue</a> and to avoid to have issues with credentials you need to follow the instructions on the following page “<a href="https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-windows-create-aad-work-id/" target="_blank" rel="noopener">Creating a Work or School identity in Azure Active Directory to use with Windows VMs</a>“</p><blockquote><p>KNOWN ISSUE: There is a known issue with Azure Active Directory causing stored credentials to expire within hours rather than 14 days when the user logs in with personal Microsoft Account (formerly Live ID) instead of an Active Directory account. Currently, there is no ETA for resolution, however in the meanwhile, you can <a href="https://azure.microsoft.com/documentation/articles/virtual-machines-windows-create-aad-work-id/" target="_blank" rel="noopener">create an AAD account</a> and login with that as a workaround.</p></blockquote><p>Now to get ready to deploy we need first the following:</p><ol><li>Get an Azure account on <a href="https://azure.microsoft.com" target="_blank" rel="noopener">Azure</a></li><li>Get Azure subscription id from Subscriptions link</li></ol><p><img src="https://c5.staticflickr.com/8/7435/27355205412_b5b2f751fa_o.jpg" alt="Azure subscription id screenshot"></p><p>Then we need to create a machine on the Azure cloud which will host our Docker containers. For that we will use Docker Machine, you can read more about it on this web page “<a href="https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-linux-docker-machine/" target="_blank" rel="noopener">Use Docker Machine with the Azure driver</a>“. </p><p>Using Docker for Windows, I execute the following docker-machine command to create the machine</p><script src="//gist.github.com/b46c5bfa339e1fd42b35d87191432c41.js?file=docker-machine_create.log"></script><p>After a couple of minutes, we can check on the Azure cloud portal, All resources menu, that Azure created everything for us</p><p><img src="https://c1.staticflickr.com/8/7006/27177992480_1b3056ce8f_o.jpg" alt="Azure ressources screenshot"></p><p>Finally, we need to get the configuration to talk to that machine, and it’s Docker daemon</p><script src="//gist.github.com/b46c5bfa339e1fd42b35d87191432c41.js?file=docker-machine_env.log"></script><p>Then execute the last line which will configure our local environment  </p><blockquote><p>&amp; “C:\Program Files\Docker\Docker\Resources\bin\docker-machine.exe” env hipchatconnect | Invoke-Expression</p></blockquote><p>Now each docker commands will be executed by the machine hosted on Azure cloud.<br>Easy and awesome!</p><p>Next step is to have a Docker container to deploy! We will use the container from my previous post “<a href="http://laurentkempe.com/2016/05/16/ASP-NET-Core-RC2-Docker-and-HipChat-Connect-add-on/">ASP.NET Core RC2, Docker and HipChat Connect add-on</a>“.</p><p>First, we need to build an image using the following command</p><script src="//gist.github.com/b46c5bfa339e1fd42b35d87191432c41.js?file=docker_build.log"></script><p>Then we need to get the public IP of our machine on the Azure portal </p><p><img src="https://c6.staticflickr.com/8/7370/26847519653_66bc0cc208_o.jpg" alt="Azure public ip"></p><p>We can run the container on Azure cloud with</p><blockquote><p>docker run -d -p 80:5000 -e NGROK_URL=’<a href="http://40.68.122.128&#39;" target="_blank" rel="noopener">http://40.68.122.128&#39;</a> hipchatconnect</p></blockquote><p>To be able to connect to our connector on the HTTP port 80, we will need to configure the firewall</p><p><img src="https://c3.staticflickr.com/8/7375/27420164226_eaa9aa3d94_o.jpg" alt="Azure firewall configuration"></p><p>and finally, connect to it!</p><p><img src="https://c6.staticflickr.com/8/7515/27383357301_ef760d740b_o.jpg" alt="Docker container running in Azure Cloud result"></p><p>What a great experience to be able to create a machine in the Azure Cloud from the command line and deploy our software so quickly!</p><p>Now that it works we will need to tackle the next issue, which is to expose the container through https because <a href="https://developer.atlassian.com/hipchat/about-hipchat-connect" target="_blank" rel="noopener">HipChat Connect</a> needs it so that the add-on can be installed in <a href="https://www.hipchat.com/" target="_blank" rel="noopener">HipChat</a>. But that’s for another post.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Following my previous post on &lt;a href=&quot;https://laurentkempe.com/2016/05/16/ASP-NET-Core-RC2-Docker-and-HipChat-Connect-add-on/&quot;&gt;ASP.NET Core RC2, Docker and HipChat Connect add-on&lt;/a&gt; I wanted to learn the next step which is to deploy my Docker container on the Microsoft Azure Cloud!&lt;br&gt;
    
    </summary>
    
    
      <category term="ASP.NET Core RC2" scheme="https://laurentkempe.com/tags/ASP-NET-Core-RC2/"/>
    
      <category term="Docker" scheme="https://laurentkempe.com/tags/Docker/"/>
    
      <category term="HipChat Connect" scheme="https://laurentkempe.com/tags/HipChat-Connect/"/>
    
      <category term="Microsoft Azure" scheme="https://laurentkempe.com/tags/Microsoft-Azure/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core RC2, Docker and HipChat Connect add-on</title>
    <link href="https://laurentkempe.com/2016/05/16/ASP-NET-Core-RC2-Docker-and-HipChat-Connect-add-on/"/>
    <id>https://laurentkempe.com/2016/05/16/ASP-NET-Core-RC2-Docker-and-HipChat-Connect-add-on/</id>
    <published>2016-05-16T18:37:03.000Z</published>
    <updated>2018-12-17T11:08:39.325Z</updated>
    
    <content type="html"><![CDATA[<p>This weekend ASP.NET Core RC2 was starting to show up! And it finally was <a href="https://blogs.msdn.microsoft.com/webdev/2016/05/16/announcing-asp-net-core-rc2/" target="_blank" rel="noopener">released today</a>. Get it fresh from <a href="https://www.microsoft.com/net/core" target="_blank" rel="noopener">here</a>. We had here a long three days weekend with quite awful gray clouds and cold weather for the season, so a perfect excuse to get started!<br><a id="more"></a><br>The first project I wanted to port to ASP.NET Core RC2 is something I began to work on some time ago when <a href="https://www.hipchat.com/" target="_blank" rel="noopener">Atlassian HipChat</a> announced their new <a href="https://developer.atlassian.com/hipchat/about-hipchat-connect" target="_blank" rel="noopener">Connect</a> framework!</p><p>I had it working with <a href="https://github.com/NancyFx/Nancy" target="_blank" rel="noopener">NancyFx</a>; it is quite small and hacky at the moment, but at least an interesting little project to port on a weekend. The second part I wanted to have is to be able to make it run in a <a href="https://www.docker.com/" target="_blank" rel="noopener">Docker</a> container so that I will be able to deploy it on our Linux server at work.</p><p>So I installed the <a href="https://blogs.msdn.microsoft.com/visualstudio/2016/05/16/announcing-updated-web-development-tools-for-asp-net-core-rc2/" target="_blank" rel="noopener">ASP.NET Core Tooling Preview</a> for Visual Studio 2015 and created a new ASP.NET Core Web Application (.NET Core) in C#, for sure!</p><p><img src="https://farm8.staticflickr.com/7477/26962278712_2de5a67090_o.png" alt="New Project"></p><p>picked up Web API</p><p><img src="https://farm8.staticflickr.com/7649/26988369191_7b0369cf04_o.png" alt="New ASP.NET Core Web Application (.NET Core)"></p><p>Finally, I started the port which took me something like two to three hours!</p><p>I ended up with the following code for the <em>Program.cs</em> file. The interesting part is the <strong>UseUrls()</strong> which I didn’t have while trying to make it run with Docker, then it wasn’t bound to the right network, and the application wasn’t accessible outside of the Docker container.</p><script src="//gist.github.com/38b53ab6c53b15a9630580b6115d2067.js?file=Program.cs"></script><p>Then I had some difficulties to have <a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing" target="_blank" rel="noopener">CORS</a> working the way I wanted, but in fact, it ended up being an issue of returning JSON from my HipChat Connect GetGlance method. So it is quite easy to configure it in the <em>Configure()</em> method.</p><script src="//gist.github.com/38b53ab6c53b15a9630580b6115d2067.js?file=Startup.cs"></script><p>Next step was to port from NancyFx module to ASP.NET Core RC2 controller, which was quite natural with the <em>Route</em>, <em>HttpGet</em>, <em>HttpPost</em>, <em>FromBody</em> and <em>FromQuery</em> attributes. The main point of interest is the <strong>ValidateToken()</strong> method which validates a JWT token using a <strong>SymmetricSecurityKey</strong>, and that wasn’t straight!</p><script src="//gist.github.com/38b53ab6c53b15a9630580b6115d2067.js?file=HipChatConnectController.cs"></script><p>To be able to test the HipChat Connect add-on, I needed to be able to expose my application from my local development machine to the internet so that I can add the add-on to one HipChat room and for that I used <a href="https://ngrok.com/" target="_blank" rel="noopener">ngrok</a>!</p><p>Using the same ngrok command I used for NancyFx with ASP.NET Core RC2 gave me as a result “<em>Http Bad Request error while calling your end point!</em>“</p><blockquote><p>ngrok http -bind-tls=true 8080</p></blockquote><p>To be able to make it work with ASP.NET Core RC2 I had to fine tune the command so that the host header is adapted, then it worked!</p><blockquote><p>ngrok http -bind-tls=true -host-header=”localhost:52060” 52060</p></blockquote><p>And to finish, I wanted to have the project running in a Docker container using <a href="http://laurentkempe.com/2016/04/30/Docker-for-Windows-Beta-review/">Docker for Windows</a>. To achieve that goal I used the following <em>Dockerfile</em></p><script src="//gist.github.com/38b53ab6c53b15a9630580b6115d2067.js?file=Dockerfile"></script><p>Built the Docker image with</p><blockquote><p>docker build -t hipchatconnect .</p></blockquote><p>Then started the Docker container with</p><blockquote><p>docker run -d -p 5000:5000 –name hipchatconnect hipchatconnect</p></blockquote><p>Checked that I could access my first ASP.NET Core RC2 project running in Docker with the following url:</p><blockquote><p><a href="http://docker:5000/hipchat/atlassian-connect.json" target="_blank" rel="noopener">http://docker:5000/hipchat/atlassian-connect.json</a></p></blockquote><p>You might be also interested to read the following post <a href="https://blog.docker.com/2016/05/docker-net-core-clr-rc2/" target="_blank" rel="noopener">“Docker and .NET Core CLR Release Candidate 2”</a> by <a href="https://blog.docker.com/author/mano/" target="_blank" rel="noopener">Mano Marks</a>.</p><p>To expose the container using ngrok I had to use:</p><blockquote><p>ngrok http -bind-tls=true -host-header=”docker:5000” docker:5000</p></blockquote><p>After adding the add-on to one of our room, the final result is a <a href="https://developer.atlassian.com/hipchat/getting-started#GettingStarted-AddstatustoHipChatroomsviaGlances" target="_blank" rel="noopener">HipChat Connect Glance</a> showing the number of our TeamCity builds and their states.</p><p><img src="https://farm8.staticflickr.com/7598/26989288911_6a7439863d_o.png" alt="HipChat Connect add-on based on ASP.NET Core RC2"></p><p>As a conclusion, to that especially long post, I am so happy that I could finally play with the ASP.NET Core RC2 bits, run a little Web application on my Windows 10 machine but also in a Linux Docker container using Docker for Windows! I love those two technologies and see a bright future for both of them. I am also delighted that Microsoft made .NET Core an open source project.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This weekend ASP.NET Core RC2 was starting to show up! And it finally was &lt;a href=&quot;https://blogs.msdn.microsoft.com/webdev/2016/05/16/announcing-asp-net-core-rc2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;released today&lt;/a&gt;. Get it fresh from &lt;a href=&quot;https://www.microsoft.com/net/core&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;. We had here a long three days weekend with quite awful gray clouds and cold weather for the season, so a perfect excuse to get started!&lt;br&gt;
    
    </summary>
    
    
      <category term="ASP.NET Core RC2" scheme="https://laurentkempe.com/tags/ASP-NET-Core-RC2/"/>
    
      <category term="Docker" scheme="https://laurentkempe.com/tags/Docker/"/>
    
      <category term="HipChat Connect" scheme="https://laurentkempe.com/tags/HipChat-Connect/"/>
    
  </entry>
  
  <entry>
    <title>Docker for Windows Beta review</title>
    <link href="https://laurentkempe.com/2016/04/30/Docker-for-Windows-Beta-review/"/>
    <id>https://laurentkempe.com/2016/04/30/Docker-for-Windows-Beta-review/</id>
    <published>2016-04-30T09:27:50.000Z</published>
    <updated>2018-12-17T11:08:39.368Z</updated>
    
    <content type="html"><![CDATA[<p>I have been playing with all Docker tools for quite some time now! Started with the command line and all its commands like docker start,  stop, ps, etc… Then I tried Kitematic and even compiled it from the source before it was supporting Windows! Then Docker Toolbox.<br><a id="more"></a><br>Two weeks ago I got access to Docker for Windows Beta, so first I uninstalled all the previous things I installed like VirtualBox, boot2docker, Docker Toolbox, even if it is supported to run in parallel with Docker for Windows. I was delighted to read that it supports Hyper-V which is a much better solution for us on Windows. Especially developers who need to run phone emulators which most of the time use Hyper-V! No more reboot tricks to turn it on or off.</p><p>My first impressions are very positive! The overall experience is much easier, and you can get started very fast. Downloading and running your first Docker images is done in some minutes now!</p><p>You now get a nice icon in the Windows notification area </p><p><img src="https://farm2.staticflickr.com/1673/26661310031_9bc569e24a_o.png" alt="Docker for Windows Tray icon"></p><p>Currently, it lets you control only a few things like Memory allocation, Automatical start, Checks for update but also, the interesting Manage shared drives</p><p><img src="https://farm2.staticflickr.com/1510/26661257341_11374f368c_o.png" alt="Docker for Windows Settings"></p><p>Till now the updates are coming at a good pace!</p><p>You can also use the entry Dashboard to download Kitematic which will let you control Docker through an interface and makes it even easier to download images and start/stop containers!</p><p><img src="https://farm2.staticflickr.com/1515/26701373396_487ce0187a_o.png" alt="Kitematic"></p><p>And the other great experience is that now you just start your command line and type your docker commands, and it just works!</p><p><img src="https://farm2.staticflickr.com/1538/26660797101_605058c25f_o.png" alt="Docker on the Command Line"></p><p>Another nice improvement is that now you can access your containers with a simple URL like <a href="http://docker.local:32769/" target="_blank" rel="noopener">http://docker.local:32769/</a> </p><p>Overall a great new experience and to me, it goes in the right direction.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I have been playing with all Docker tools for quite some time now! Started with the command line and all its commands like docker start,  stop, ps, etc… Then I tried Kitematic and even compiled it from the source before it was supporting Windows! Then Docker Toolbox.&lt;br&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://laurentkempe.com/tags/Docker/"/>
    
      <category term="Visual Studio" scheme="https://laurentkempe.com/tags/Visual-Studio/"/>
    
      <category term="Windows" scheme="https://laurentkempe.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Ease Github Pull Request code review</title>
    <link href="https://laurentkempe.com/2016/04/18/Ease-Github-Pull-Request-code-review/"/>
    <id>https://laurentkempe.com/2016/04/18/Ease-Github-Pull-Request-code-review/</id>
    <published>2016-04-18T13:21:47.000Z</published>
    <updated>2018-12-17T11:08:39.371Z</updated>
    
    <content type="html"><![CDATA[<p>Even if online <a href="https://help.github.com/articles/using-pull-requests/" target="_blank" rel="noopener">Github Pull Request</a> is a nice and effective tool, in some situation you need to open your solution in Visual Studio to verify something.<br><a id="more"></a><br>One evening, I created a project called <a href="https://github.com/laurentkempe/PReview" target="_blank" rel="noopener">PReview</a> which after you feed it with a diff file lets you filter Visual Studio Solution Explorer with all files changed. It is really alpha and a quick one evening hack!</p><p>The other day my colleague <a href="https://twitter.com/gianluigiconti" target="_blank" rel="noopener">Gianluigi</a> proposed to my team an alternative with a PowerShell script which you would run specifying the Pull Request id and the branch name:</p><blockquote><p>review 272 feature/1270-show-hide-panels</p></blockquote><p>Nice! The script is good but as I am spending a bit more than a day of work working on a running train with an unstable internet connection I needed something that would work offline too. So I thought there should be a way that would fulfill that requirement!</p><p>I ended up with something really easy which also leverage the nice possibility of <a href="https://github.com/laurentkempe/GitDiffMargin" target="_blank" rel="noopener">GitDiffMargin</a> to see changes in Visual Studio margin.</p><p>Basically, you create a new branch at the beginning of the branch that you want to review. Then you merge the original branch into the review branch with the squash option.</p><p>Let’s see a concrete example with my project <a href="https://github.com/laurentkempe/nubot" target="_blank" rel="noopener">Nubot</a>. Our goal is to review the branch called feature/hipchat-connect.<br>First, we need to find the SHA1 of the previous commit of the start of the branch feature/hipchat-connect. You might use a tool like <a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">SourceTree</a> </p><p><img src="https://farm2.staticflickr.com/1570/25900395853_1312aa8129_o.png" alt="Ease Github Pull Request Code Review 1"></p><p>or with a nice git alias </p><blockquote><p>lg = log –color –graph –pretty=format:’%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset’ –abbrev-commit –</p></blockquote><p><img src="https://farm2.staticflickr.com/1533/25900395843_2bc52142b8_o.png" alt="Ease Github Pull Request Code Review 2"></p><p>On both screenshots, we see that the SHA1 of the commit is <strong>4d6a5d1</strong></p><p>So now we create our new review branch</p><blockquote><p>git checkout -b review/hipchat-connect 4d6a5d1</p></blockquote><p>Then we squash the original branch into the review one</p><blockquote><p> git merge –squash feature/hipchat-connect</p></blockquote><p>Now opening Visual Studio you can go to the Solution Explorer and click on Pending Changes Filter and you will get the list of file modified</p><p><img src="https://farm2.staticflickr.com/1445/26410906852_75b2c64267_o.png" alt="Ease Github Pull Request Code Review 3"></p><p>And on the source code, you will see the changes thanks to <a href="https://visualstudiogallery.msdn.microsoft.com/cf49cf30-2ca6-4ea0-b7cc-6a8e0dadc1a8" target="_blank" rel="noopener">GitDiffMargin</a></p><p><img src="https://farm2.staticflickr.com/1535/25900395813_bc5efee43e_o.png" alt="Ease Github Pull Request Code Review 4"></p><p>You have now all your current tools to navigate your code and do even easier code review!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Even if online &lt;a href=&quot;https://help.github.com/articles/using-pull-requests/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github Pull Request&lt;/a&gt; is a nice and effective tool, in some situation you need to open your solution in Visual Studio to verify something.&lt;br&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://laurentkempe.com/tags/Git/"/>
    
      <category term="Visual Studio" scheme="https://laurentkempe.com/tags/Visual-Studio/"/>
    
      <category term="GitHub" scheme="https://laurentkempe.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Hosting nugets in TeamCity</title>
    <link href="https://laurentkempe.com/2016/04/14/Hosting-nugets-in-TeamCity/"/>
    <id>https://laurentkempe.com/2016/04/14/Hosting-nugets-in-TeamCity/</id>
    <published>2016-04-14T20:04:11.000Z</published>
    <updated>2018-12-17T11:08:39.398Z</updated>
    
    <content type="html"><![CDATA[<p>In the past in my team, we were storing the Telerik assemblies into our SVN repository then in Git! I wasn’t happy about that for a really long time. Each releases our repository was growing much more than it was needed for nothing!<br><a id="more"></a><br>One day Telerik shipped their great WPF controls as nugets which solved half of our problem! Now the next problem was where do we store those nugets so that we can get those back. Searching a bit we found some solutions like <a href="https://myget.org/" target="_blank" rel="noopener">myget</a> but we wanted one which we could host on our infrastructure. After some more research, we found ou that TeamCity, could work as a <a href="https://confluence.jetbrains.com/display/TCD9/NuGet#NuGet-UsingTeamCityasNuGetServer" target="_blank" rel="noopener">Nuget server</a>.</p><p>That was just perfect because we have been using TeamCity from day 1 of the project. We finally go the  second half of our solution.</p><p>You first need to activate the Nuget server on TeamCity:</p><p><img src="https://farm2.staticflickr.com/1674/26338964882_405d486347_o.png" alt="tc-nuget-server-1"></p><p>We have activated the guest account so that the Nuget feed URL is accessible without any credentials. We use it on our LAN so that’s not really an issue for us. But it also works with credentials if you want.</p><p>The way TeamCity works with Nuget server is quite easy: any artifacts resolved after a build are then available through the Nuget server.</p><p>So next step was to define how to we bring a new version of the Telerik nugets when they ship a new version.</p><p><img src="https://farm2.staticflickr.com/1441/26365113121_7f3047a0da_o.png" alt="tc-nuget-server-2"></p><p>Again easy, just configure a build which takes the .nupkg from one folder and then bundle those as a build artifact.</p><p><img src="https://farm2.staticflickr.com/1671/25828490813_5a089e7001_o.png" alt="tc-nuget-server-3"></p><p>So when Telerik release a new version we just need to upload all the .nupkg files to the folder <em>C:\Telerik\</em> and run the build!</p><p>One more step in the good direction of automation!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In the past in my team, we were storing the Telerik assemblies into our SVN repository then in Git! I wasn’t happy about that for a really long time. Each releases our repository was growing much more than it was needed for nothing!&lt;br&gt;
    
    </summary>
    
    
      <category term=".NET Development" scheme="https://laurentkempe.com/tags/NET-Development/"/>
    
      <category term="continuous integration" scheme="https://laurentkempe.com/tags/continuous-integration/"/>
    
  </entry>
  
  <entry>
    <title>Upload files to DropBox from PowerShell</title>
    <link href="https://laurentkempe.com/2016/04/07/Upload-files-to-DropBox-from-PowerShell/"/>
    <id>https://laurentkempe.com/2016/04/07/Upload-files-to-DropBox-from-PowerShell/</id>
    <published>2016-04-07T19:41:32.000Z</published>
    <updated>2018-12-17T11:08:39.526Z</updated>
    
    <content type="html"><![CDATA[<p>When I <a href="http://laurentkempe.com/2016/04/05/Moving-to-Cake-CSharp-Make/">migrated our build to Cake (C# Make)</a> we had one requirement which was to upload some of the build output’s artifacts to DropBox at the end of the build.<br><a id="more"></a><br>I searched for that kind of capabilities in Cake reference documentation but couldn’t find anything out of the box.</p><p>I could have gone to write my own add-in but I found the <a href="http://cakebuild.net/addins/category/powershell" target="_blank" rel="noopener">PowerShell</a> one, great!<br>So I decided that I could write a little PowerShell script to achieve that upload to DropBox.</p><p>Here it is</p><script src="//gist.github.com/9e71a307e1d216d17e5adf1589e51c5e.js?file=dropbox-upload.ps1"></script><p>The script is getting one environment variable <em>DropBoxAccessToken</em>, which represents the DropBox access token because I don’t want to see the access token logged into our TeamCity logs.</p><p>One gotcha from <a href="https://www.dropbox.com/developers/documentation/http/documentation#files-upload" target="_blank" rel="noopener">DropBox REST API upload documentation</a> which hit me was how to upload to a business account? In fact, it is really easy, you just need to create an application for your business account with permission full!</p><p>Warning, I do not consider myself as a PowerShell expert, I am more of a kind of PowerShell hacker, so take this script with all precautions.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;When I &lt;a href=&quot;http://laurentkempe.com/2016/04/05/Moving-to-Cake-CSharp-Make/&quot;&gt;migrated our build to Cake (C# Make)&lt;/a&gt; we had one requirement which was to upload some of the build output’s artifacts to DropBox at the end of the build.&lt;br&gt;
    
    </summary>
    
    
      <category term="continuous integration" scheme="https://laurentkempe.com/tags/continuous-integration/"/>
    
      <category term="PowerShell" scheme="https://laurentkempe.com/tags/PowerShell/"/>
    
  </entry>
  
  <entry>
    <title>Moving to Cake (C# Make)</title>
    <link href="https://laurentkempe.com/2016/04/05/Moving-to-Cake-CSharp-Make/"/>
    <id>https://laurentkempe.com/2016/04/05/Moving-to-Cake-CSharp-Make/</id>
    <published>2016-04-05T15:46:28.000Z</published>
    <updated>2018-12-17T11:08:39.441Z</updated>
    
    <content type="html"><![CDATA[<p>I finally invested time to migrate our build from a heteroclite mixture of  MSBuild, TeamCity build steps and whatever to something that really delight me: <a href="http://cakebuild.net/" target="_blank" rel="noopener">Cake (C# Make)</a>.<br><a id="more"></a></p><p>I tried in the past several other systems like PSake, Fake… Never grasped those and gave up quite quickly.</p><p>This time, two triggers pushed me to look further:</p><p></p><p></p><ol><li>We had to build a patch and someone deactivated <a href="http://laurentkempe.com/2014/12/13/TeamCity-9-project-settings-versioning-in-Git/">TeamCity project settings versioning in Git</a> so we could not get back the settings and could not build on TeamCity, too bad!</li><li>We were working on improving the performance of our build by going to NUnit 3 and trying to run our specifications, integrations and unit tests in parallel.</li></ol><p>For long I was the advocate of versioning our build script with the source code but never got the time to finally do it. I guess you need a bit of pain to trigger some changes.</p><p>So last week I prepared a small presentation to my great team which I presented this last Monday. You can have a look that presentation <a href="https://sway.com/G8xS5gVqbwOA9euI" target="_blank" rel="noopener">here</a>.</p><p>Most of the slides are coming from the Cake documentation provided by the team behind this great project!</p><p>I would like to put some emphasis on one part which is not coming from Cake documentation which is: <strong>Why Cake?</strong></p><p></p>  <p></p><ul><li><strong>Unify</strong> our build process</li><li><strong>Versioning</strong> the build script <strong>with the source code</strong> of the application</li><li>Being able to <strong>run</strong> our build <strong>where we want</strong><ul><li>Any machine with .NET framework, good for our escrow process</li><li>Our TeamCity build server</li><li>New cloud build services like AppVeyor, Visual Studio Team Services…</li></ul></li><li><strong>It is C#</strong>. In the past we looked at PSake, Fake.. but never really grasped those</li><li>Coming with almost all <a href="http://cakebuild.net/dsl" target="_blank" rel="noopener">tools</a>, <a href="http://cakebuild.net/addins?path=contributing%252Fguidelines" target="_blank" rel="noopener">add-ins</a> we need for our build process. Missing NDepend which stays as a TeamCity build at the moment.</li><li><strong>Open source</strong> and <strong>great responsive community</strong> on <a href="https://gitter.im/cake-build/cake" target="_blank" rel="noopener">Gitter chat</a></li><li>No need to version binaries</li><li>Syntax Highlighting in Visual Studio Code</li></ul><p>One point to take away from that list is <strong>great responsive community</strong> and nothing proves it more than <a href="https://gitter.im/cake-build/cake?at=57024151d39de41b49604f5e" target="_blank" rel="noopener">this discussion</a> and that <a href="https://github.com/cake-build/cake/issues/805" target="_blank" rel="noopener">pull request</a> which fixes an issue we just found and reported. The fix came the same day and will be available in the next patch release, great job. </p><p>So our current situation is much better now!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I finally invested time to migrate our build from a heteroclite mixture of  MSBuild, TeamCity build steps and whatever to something that really delight me: &lt;a href=&quot;http://cakebuild.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cake (C# Make)&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
      <category term=".NET Development" scheme="https://laurentkempe.com/tags/NET-Development/"/>
    
      <category term="continuous integration" scheme="https://laurentkempe.com/tags/continuous-integration/"/>
    
  </entry>
  
  <entry>
    <title>Rebooting my blog</title>
    <link href="https://laurentkempe.com/2016/03/29/Rebooting-my-blog/"/>
    <id>https://laurentkempe.com/2016/03/29/Rebooting-my-blog/</id>
    <published>2016-03-29T18:18:33.000Z</published>
    <updated>2018-12-17T11:08:39.473Z</updated>
    
    <content type="html"><![CDATA[<p>After almost 6 years using <a href="http://dotnetblogengine.net/" target="_blank" rel="noopener">BlogEngine.NET</a> and a bit more of a year without any new post I decided that it was time to reboot my blog!<br><a id="more"></a><br>My first choice was to go with a static website/blog tool! One reason was that I didn’t want to deal with the hosting anymore.</p><p>I started to explore the possibility to use <a href="https://jekyllrb.com/" target="_blank" rel="noopener">jekyll</a> but after quite some issues to make it work on Windows I decided to forget about it.</p><p>Then searching for several other solutions, and there are a lot, see <a href="https://www.staticgen.com/" target="_blank" rel="noopener">StaticGen</a>, I opted for <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo.io</a> because I had already <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a> installed on my machine and Hexo was quite fast and easy to use. I also could find a very nice responsive theme named <a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak" target="_blank" rel="noopener">hexo-theme-tranquilpeak</a>.</p><p>In the meantime, I had to write a bit of software to automate to the maximum the migration process because it would have been too much work to do by hand, and for sure I prefer to let computers do the work.</p><p>Jump forward a couple of months and here we are!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;After almost 6 years using &lt;a href=&quot;http://dotnetblogengine.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BlogEngine.NET&lt;/a&gt; and a bit more of a year without any new post I decided that it was time to reboot my blog!&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TeamCity 9 project settings versioning in Git</title>
    <link href="https://laurentkempe.com/2014/12/13/TeamCity-9-project-settings-versioning-in-Git/"/>
    <id>https://laurentkempe.com/2014/12/13/TeamCity-9-project-settings-versioning-in-Git/</id>
    <published>2014-12-13T02:16:58.000Z</published>
    <updated>2014-12-13T02:39:12.000Z</updated>
    
    <content type="html"><![CDATA[<!-- [![Anse Cafard](https://farm8.staticflickr.com/7480/16005747085_1d45cdda13_m.jpg)](https://www.flickr.com/photos/laurentkempe/16005747085 "Anse Cafard by Laurent Kempé, on Flickr") --><p>One of the great new feature of <a href="https://confluence.jetbrains.com/display/TCD9/What%27s+New+in+TeamCity+9.0" target="_blank" rel="noopener">TeamCity 9</a> is the possibility of <a href="https://confluence.jetbrains.com/display/TCD9/What%27s+New+in+TeamCity+9.0#What%27sNewinTeamCity9.0-StoringprojectsettingsinGitandMercurial" target="_blank" rel="noopener">Storing project settings in Git and Mercurial</a>.</p><p>When you develop software it is primordial to be able to reproduce successfully builds. To achieve that goal you need for sure first to version the source code. But too often the build scripts are forgotten! Especially when the build scripts are created with such a great tool that is <a href="https://www.jetbrains.com/teamcity/" target="_blank" rel="noopener">TeamCity</a>.<br><a id="more"></a></p><p>So we want to keep the source code and the configuration of the build server quite near. So that we are sure we can always rebuild a previous version of the software.</p><p>What we don’t want is to have a mixture of source code and build configurations. To achieve that goal we can use the Git possibility to <a href="http://git-scm.com/docs/git-checkout/" target="_blank" rel="noopener">create orphan branch</a></p><blockquote><p>git checkout –orphan teamcity/settings</p></blockquote><p>Then we remove all content from the old working tree, normally your current source code. No worries, the other files are kept in the other branches!</p><blockquote><p>git rm -rf .</p></blockquote><p>We add a ReadMe.md explaining that this branch is about storing the build server settings and we make a first commit</p><blockquote><p>git add ReadMe.md<br>git commit -m “Initial TeamCity build settings commit”</p></blockquote><p>And finally we push that to the origin git repository</p><blockquote><p>git push origin teamcity/settings</p></blockquote><p>Now on your TeamCity server you can follow the instruction in <a href="https://confluence.jetbrains.com/display/TCD9/Storing+Project+Settings+in+Version+Control" target="_blank" rel="noopener">Storing Project Settings in Version Control</a> to define that TeamCity must version all changes which are done to your project.</p><p>We do it on the top most project so that we get all stored in our Git repository.</p><p>To achieve that we define a new TeamCity VCS Root pointing to our newly created orphaned branch; teamcity/settings and finally click the Apply button.</p><p>After some seconds you will get in your Git repository a second commit done by TeamCity containing all the configurations files!</p><p>Nice new feature!</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- [![Anse Cafard](https://farm8.staticflickr.com/7480/16005747085_1d45cdda13_m.jpg)](https://www.flickr.com/photos/laurentkempe/16005747085 &quot;Anse Cafard by Laurent Kempé, on Flickr&quot;) --&gt;
&lt;p&gt;One of the great new feature of &lt;a href=&quot;https://confluence.jetbrains.com/display/TCD9/What%27s+New+in+TeamCity+9.0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TeamCity 9&lt;/a&gt; is the possibility of &lt;a href=&quot;https://confluence.jetbrains.com/display/TCD9/What%27s+New+in+TeamCity+9.0#What%27sNewinTeamCity9.0-StoringprojectsettingsinGitandMercurial&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Storing project settings in Git and Mercurial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When you develop software it is primordial to be able to reproduce successfully builds. To achieve that goal you need for sure first to version the source code. But too often the build scripts are forgotten! Especially when the build scripts are created with such a great tool that is &lt;a href=&quot;https://www.jetbrains.com/teamcity/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TeamCity&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://laurentkempe.com/tags/Git/"/>
    
      <category term="Team City" scheme="https://laurentkempe.com/tags/Team-City/"/>
    
  </entry>
  
</feed>
